{
    "version": "https://jsonfeed.org/version/1",
    "title": "荒天帝",
    "subtitle": "",
    "icon": "https://slx-world.top/images/favicon.ico",
    "description": "他年，我若立于万古诸天上，将与你们共岁月！",
    "home_page_url": "https://slx-world.top",
    "items": [
        {
            "id": "https://slx-world.top/hello-world/",
            "url": "https://slx-world.top/hello-world/",
            "title": "Hello World",
            "date_published": "2025-03-04T06:02:14.739Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://slx-world.top/backend/framework/mybatisplus/mybatisplus-notes/",
            "url": "https://slx-world.top/backend/framework/mybatisplus/mybatisplus-notes/",
            "title": "MyBatisPlus 笔记",
            "date_published": "2024-11-21T16:00:00.000Z",
            "content_html": "<h1 id=\"核心功能\"><a class=\"anchor\" href=\"#核心功能\">#</a> 核心功能</h1>\n<h2 id=\"条件构造器\"><a class=\"anchor\" href=\"#条件构造器\">#</a> 🧂条件构造器</h2>\n<p>除了新增以外，修改、删除、查询的 SQL 语句都需要指定 where 条件。因此 BaseMapper 中提供的相关方法除了以 <code>id</code>  作为 <code>where</code>  条件以外，还支持更加复杂的 <code>where</code>  条件。</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688117068580-3abcd2bb-fbf8-4430-8f2a-dcf130f05f70.png\" alt=\"image.png\" /></p>\n<p>参数中的 <code>Wrapper</code>  就是条件构造的抽象类，其下有很多默认实现，继承关系如图：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688117775304-84915c47-d2d9-49f4-90fb-99270d9353c7.png\" alt=\"image.png\" /></p>\n<p><code>Wrapper</code>  的子类 <code>AbstractWrapper</code>  提供了 where 中包含的所有条件构造方法：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688117979051-e388959d-86ba-4aa9-9d57-cd9fd84fc00f.png\" alt=\"image.png\" /></p>\n<p>而 QueryWrapper 在 AbstractWrapper 的基础上拓展了一个 select 方法，允许指定查询字段：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688118137162-ffcf1fe3-57cb-46ef-b069-9d576e9f0184.png\" alt=\"image.png\" /></p>\n<p>而 UpdateWrapper 在 AbstractWrapper 的基础上拓展了一个 set 方法，允许指定 SQL 中的 SET 部分：<br />\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688118200333-0c97025d-1bd9-4f3b-a486-7e6a1cf3604d.png\" alt=\"image.png\" /></p>\n<h2 id=\"service-接口\"><a class=\"anchor\" href=\"#service-接口\">#</a> 🧂Service 接口</h2>\n<p>MybatisPlus 不仅提供了 BaseMapper，还提供了通用的 Service 接口及默认实现，封装了一些常用的 service 模板方法。<br />\n通用接口为 <code>IService</code> ，默认实现为 <code>ServiceImpl</code> ，其中封装的方法可以分为以下几类：</p>\n<ul>\n<li><code>save</code> ：新增</li>\n<li><code>remove</code> ：删除</li>\n<li><code>update</code> ：更新</li>\n<li><code>get</code> ：查询单个结果</li>\n<li><code>list</code> ：查询集合结果</li>\n<li><code>count</code> ：计数</li>\n<li><code>page</code> ：分页查询</li>\n</ul>\n<h3 id=\"crud\"><a class=\"anchor\" href=\"#crud\">#</a> 🧂CRUD</h3>\n<p><strong>新增</strong>：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688175852334-462e40db-e880-4131-adaa-5fc14360ff73.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>save</code>  是新增单个元素</li>\n<li><code>saveBatch</code>  是批量新增</li>\n<li><code>saveOrUpdate</code>  是根据 id 判断，如果数据存在就更新，不存在则新增</li>\n<li><code>saveOrUpdateBatch</code>  是批量的新增或修改</li>\n</ul>\n<p><strong>删除：</strong></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688176052341-b6c0528d-bb35-452d-9087-ea5ee2708bd4.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>removeById</code> ：根据 id 删除</li>\n<li><code>removeByIds</code> ：根据 id 批量删除</li>\n<li><code>removeByMap</code> ：根据 Map 中的键值对为条件删除</li>\n<li><code>remove(Wrapper&lt;T&gt;)</code> ：根据 Wrapper 条件删除</li>\n<li><code>~~removeBatchByIds~~</code> ：暂不支持</li>\n</ul>\n<p><strong>修改：</strong></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688176292104-2d148912-019b-46c2-8537-54b9b1274abd.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>updateById</code> ：根据 id 修改</li>\n<li><code>update(Wrapper&lt;T&gt;)</code> ：根据 <code>UpdateWrapper</code>  修改， <code>Wrapper</code>  中包含 <code>set</code>  和 <code>where</code>  部分</li>\n<li><code>update(T，Wrapper&lt;T&gt;)</code> ：按照 <code>T</code>  内的数据修改与 <code>Wrapper</code>  匹配到的数据</li>\n<li><code>updateBatchById</code> ：根据 id 批量修改</li>\n</ul>\n<p><strong>Get：</strong><br />\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688176734766-5df895e7-950a-4050-aa14-996ba9f6efc7.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>getById</code> ：根据 id 查询 1 条数据</li>\n<li><code>getOne(Wrapper&lt;T&gt;)</code> ：根据 <code>Wrapper</code>  查询 1 条数据</li>\n<li><code>getBaseMapper</code> ：获取 <code>Service</code>  内的 <code>BaseMapper</code>  实现，某些时候需要直接调用 <code>Mapper</code>  内的自定义 <code>SQL</code>  时可以用这个方法获取到 <code>Mapper</code></li>\n</ul>\n<p><strong>List：</strong><br />\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688176798210-d60284da-3862-422b-9621-2eec6b77c7ee.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>listByIds</code> ：根据 id 批量查询</li>\n<li><code>list(Wrapper&lt;T&gt;)</code> ：根据 Wrapper 条件查询多条数据</li>\n<li><code>list()</code> ：查询所有</li>\n</ul>\n<p><strong>Count</strong>：<br />\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1688176988135-5c605f58-87f5-42de-8613-ba3e7f7c36b4.png\" alt=\"image.png\" /></p>\n<ul>\n<li><code>count()</code> ：统计所有数量</li>\n<li><code>count(Wrapper&lt;T&gt;)</code> ：统计符合 <code>Wrapper</code>  条件的数据数量</li>\n</ul>\n<p><strong>getBaseMapper</strong>：<br />\n当我们在 service 中要调用 Mapper 中自定义 SQL 时，就必须获取 service 对应的 Mapper，就可以通过这个方法：<br />\n<img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/mybatisplus/1689651515691-7a4ff31d-e73e-443e-a088-62af40589fa5.png\" alt=\"image.png\" /></p>\n<h3 id=\"基本用法\"><a class=\"anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n",
            "tags": [
                "Backend",
                "Framework",
                "MyBatisPlus"
            ]
        },
        {
            "id": "https://slx-world.top/devops/git/git-notes/",
            "url": "https://slx-world.top/devops/git/git-notes/",
            "title": "Git 笔记",
            "date_published": "2024-11-11T16:00:00.000Z",
            "content_html": "<h1 id=\"git-概述\"><a class=\"anchor\" href=\"#git-概述\">#</a> 🍨Git 概述</h1>\n<h2 id=\"git-工作流程图\"><a class=\"anchor\" href=\"#git-工作流程图\">#</a> 🍉Git 工作流程图</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250303211159483.png\" alt=\"image-20250303211159483\" /></p>\n<p><strong>命令如下：</strong></p>\n<ul>\n<li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li>\n<li>checkout （检出）: 从本地仓库中检出一个仓库分支然后进行修订</li>\n<li>add（添加）: 在提交前先将代码提交到暂存区</li>\n<li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li>\n<li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li>\n<li>pull (拉取) ： 从远程库拉到本地库，自动进行合并 (merge)，然后放到到工作区，相当于 fetch+merge</li>\n<li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li>\n</ul>\n<h1 id=\"git-环境配置\"><a class=\"anchor\" href=\"#git-环境配置\">#</a> 🍨Git 环境配置</h1>\n<h2 id=\"下载与安装\"><a class=\"anchor\" href=\"#下载与安装\">#</a> 🍉下载与安装</h2>\n<p>下载地址：  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZA==\">https://git-scm.com/download</span></p>\n<h2 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 🍉基本配置</h2>\n<p>设置用户信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">'用户名'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">'邮箱'</span></pre></td></tr></table></figure><p>查看配置信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email</pre></td></tr></table></figure><h2 id=\"为常用指令配置别名可选\"><a class=\"anchor\" href=\"#为常用指令配置别名可选\">#</a> 🍉为常用指令配置别名（可选）</h2>\n<ol>\n<li>\n<p>打开用户目录，创建 <code> .bashrc</code>  文件</p>\n<p>部分 windows 系统不允许用户创建点号开头的文件，可以打开 gitBash, 执行  <code>touch ~/.bashrc</code></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250303212600381.png\" alt=\"image-20250303212600381\" /></p>\n</li>\n<li>\n<p>在  <code>.bashrc</code>  文件中输入如下内容：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#用于输出 git 提交日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">alias</span> git-log<span class=\"token operator\">=</span><span class=\"token string\">'git log --pretty=oneline --all --graph --abbrev-commit'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#用于输出当前目录所有文件及基本信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ll</span><span class=\"token operator\">=</span>'ls <span class=\"token parameter variable\">-al</span></pre></td></tr></table></figure></li>\n<li>\n<p>打开 gitBash，执行  <code>source ~/.bashrc</code></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250303212729464.png\" alt=\"image-20250303212729464\" /></p>\n</li>\n</ol>\n<h2 id=\"解决-gitbash-乱码问题\"><a class=\"anchor\" href=\"#解决-gitbash-乱码问题\">#</a> 🍉解决 GitBash 乱码问题</h2>\n<ol>\n<li>\n<p>打开 GitBash 执行下面命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>GitBash命令行</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> core.quotepath <span class=\"token boolean\">false</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>  文件最后加入下面两行</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">export</span> <span class=\"token value attr-value\">LANG=\"zh_CN.UTF-8\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">export</span> <span class=\"token value attr-value\">LC_ALL=\"zh_CN.UTF-8\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"git-常用命令\"><a class=\"anchor\" href=\"#git-常用命令\">#</a> 🍨Git 常用命令</h1>\n<h2 id=\"基础操作命令\"><a class=\"anchor\" href=\"#基础操作命令\">#</a> 🍉基础操作命令</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250304082828122.png\" alt=\"image-20250304082828122\" /></p>\n<h3 id=\"查看修改的状态status\"><a class=\"anchor\" href=\"#查看修改的状态status\">#</a> 🍠查看修改的状态（status）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr></table></figure><h3 id=\"添加工作区到暂存区add\"><a class=\"anchor\" href=\"#添加工作区到暂存区add\">#</a> 🍠添加工作区到暂存区（add）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> 单个文件名<span class=\"token operator\">|</span>通配符</pre></td></tr></table></figure><ul>\n<li>将所有修改加入暂存区： <code>git add .</code></li>\n</ul>\n<h3 id=\"提交暂存区到本地仓库commit\"><a class=\"anchor\" href=\"#提交暂存区到本地仓库commit\">#</a> 🍠提交暂存区到本地仓库（commit）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'注释内容'</span></pre></td></tr></table></figure><h3 id=\"查看提交日志log\"><a class=\"anchor\" href=\"#查看提交日志log\">#</a> 🍠查看提交日志（log）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> log <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li><code>-all</code>  显示所有分支</li>\n<li><code>--pretty=oneline</code>  将提交信息显示为一行</li>\n<li><code>--abbrev-commit</code>  使得输出的 commitId 更简短</li>\n<li><code>--graph</code>  以图的形式显示</li>\n</ul>\n<h3 id=\"版本回退\"><a class=\"anchor\" href=\"#版本回退\">#</a> 🍠版本回退</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> commitID</pre></td></tr></table></figure><div class=\"note info\">\n<p>commitID 可以使用  <code>git-log</code>  或  <code>git log</code>  指令查看</p>\n</div>\n<p>如何查看已经删除的记录❓</p>\n<p><code>git reflog</code>  这个指令可以看到已经删除的提交记录</p>\n<h3 id=\"添加文件至忽略列表\"><a class=\"anchor\" href=\"#添加文件至忽略列表\">#</a> 🍠添加文件至忽略列表</h3>\n<p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动 生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录 中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>.gitignore</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># no .a files</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*.a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># but do track lib.a, even though you're ignoring .a files above</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">!lib.a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># only ignore the TODO file in the current directory, not subdir/TODO</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/TODO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># ignore all files in the build/ directory</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>build/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># ignore doc/notes.txt, but not doc/server/arch.txt</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>doc/*.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># ignore all .pdf files in the doc/ directory</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>doc/**/*.pdf</pre></td></tr></table></figure><h2 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 🍉分支</h2>\n<h3 id=\"查看本地分支\"><a class=\"anchor\" href=\"#查看本地分支\">#</a> 🍠查看本地分支</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr></table></figure><h3 id=\"创建本地分支\"><a class=\"anchor\" href=\"#创建本地分支\">#</a> 🍠创建本地分支</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> branch 分支名</pre></td></tr></table></figure><h3 id=\"切换分支\"><a class=\"anchor\" href=\"#切换分支\">#</a> 🍠切换分支</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout 分支名</pre></td></tr></table></figure><p>创建并切换</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> 分支名</pre></td></tr></table></figure><h3 id=\"合并分支\"><a class=\"anchor\" href=\"#合并分支\">#</a> 🍠合并分支</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> merge 分支名</pre></td></tr></table></figure><h3 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 🍠删除分支</h3>\n<div class=\"note warning\">\n<p>不能删除当前分支，只能删除其他分支</p>\n</div>\n<ul>\n<li><code>git branch -d b1</code>  删除分支时，需要做各种检查</li>\n<li><code>git branch -D b2</code>  不做任何检查，强制删除</li>\n</ul>\n<h3 id=\"解决冲突\"><a class=\"anchor\" href=\"#解决冲突\">#</a> 🍠解决冲突</h3>\n<p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p>\n<ol>\n<li>处理文件中冲突的地方</li>\n<li>将解决完冲突的文件加入暂存区 (add)</li>\n<li>提交到仓库 (commit) 冲突部分的内容处理如下所示：</li>\n</ol>\n<h3 id=\"开发中分支使用原则与流程\"><a class=\"anchor\" href=\"#开发中分支使用原则与流程\">#</a> 🍠开发中分支使用原则与流程</h3>\n<p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。 在开发中，一般有如下分支使用原则与流程：</p>\n<ul>\n<li>\n<p>master （生产） 分支</p>\n<p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p>\n</li>\n<li>\n<p>develop（开发）分支</p>\n<p>是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支，准备上线。</p>\n</li>\n<li>\n<p>feature/xxxx 分支</p>\n<p>从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到 develop 分支。</p>\n</li>\n<li>\n<p>hotfix/xxxx 分支</p>\n<p>从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、 develop 分支。</p>\n</li>\n<li>\n<p>还有一些其他分支，在此不再详述，例如 test 分支（用于代码测试）、pre 分支（预上线分支）等等</p>\n</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250304094129815.png\" alt=\"image-20250304094129815\" /></p>\n<h1 id=\"git-远程仓库\"><a class=\"anchor\" href=\"#git-远程仓库\">#</a> 🍨Git 远程仓库</h1>\n<h2 id=\"配置-ssh-公钥\"><a class=\"anchor\" href=\"#配置-ssh-公钥\">#</a> 🍉配置 SSH 公钥</h2>\n<ol>\n<li>\n<p>生成 SSH 公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa</pre></td></tr></table></figure><p>不断回车 如果公钥已经存在，则自动覆盖 ​​</p>\n</li>\n<li>\n<p>Gitee 设置账户公钥</p>\n<p>获取公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</pre></td></tr></table></figure></li>\n<li>\n<p>验证是否配置成功</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@gitee.com</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"操作远程仓库\"><a class=\"anchor\" href=\"#操作远程仓库\">#</a> 🍉操作远程仓库</h2>\n<h3 id=\"添加远程仓库\"><a class=\"anchor\" href=\"#添加远程仓库\">#</a> 🍠添加远程仓库</h3>\n<p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>远端名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>仓库路径<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"查看远程仓库\"><a class=\"anchor\" href=\"#查看远程仓库\">#</a> 🍠查看远程仓库</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote</pre></td></tr></table></figure><h3 id=\"推送到远程仓库\"><a class=\"anchor\" href=\"#推送到远程仓库\">#</a> 🍠推送到远程仓库</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token punctuation\">[</span>-f<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--set-upstream<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>远端名称 <span class=\"token punctuation\">[</span>本地分支名<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>:远端分支名<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>\n<p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure></li>\n<li>\n<p><code>-f</code>  表示强制覆盖</p>\n</li>\n<li>\n<p><code>--set-upstream</code>  推送到远端的同时并且建立起和远端分支的关联关系</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>sh</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push --set-upstream origin master</pre></td></tr></table></figure><p>如果 <code>当前分支已经和远端分支关联</code> ，则可以省略分支名和远端名</p>\n<ul>\n<li><code>git push</code>  将 master 分支推送到已关联的远端分支</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"本地分支与远程分支的关联关系\"><a class=\"anchor\" href=\"#本地分支与远程分支的关联关系\">#</a> 🍠本地分支与远程分支的关联关系</h3>\n<p>查看关联关系我们可以使用   <code>git branch -vv</code></p>\n<h3 id=\"从远程仓库克隆\"><a class=\"anchor\" href=\"#从远程仓库克隆\">#</a> 🍠从远程仓库克隆</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>仓库路径<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>本地目录<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>本地目录可以省略，会自动生成一个目录</p>\n</div>\n<h3 id=\"从远程仓库中抓取和拉取\"><a class=\"anchor\" href=\"#从远程仓库中抓取和拉取\">#</a> 🍠从远程仓库中抓取和拉取</h3>\n<p>远程分支和本地的分支一样，我们可以进行 merge 操作，只是需要先把远端仓库里的更新都下载到本 地，再进行操作。</p>\n<ul>\n<li>抓取命令： <code>git fetch [remote name] [branch name]</code>\n<ul>\n<li><span class=\"red\">抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</span></li>\n<li>如果不指定远端名称和分支名，则抓取所有分支</li>\n</ul>\n</li>\n<li>拉取命令： <code>git pull [remote name] [branch name]</code>\n<ul>\n<li><span class=\"red\">拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于 fetch+merge</span></li>\n<li>如果不指定远端名称和分支名，则抓取所有并更新当前分支</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解决合并冲突\"><a class=\"anchor\" href=\"#解决合并冲突\">#</a> 🍠解决合并冲突</h3>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/git/image-20250304122905844.png\" alt=\"image-20250304122905844\" /></p>\n",
            "tags": [
                "DevOps",
                "Git"
            ]
        },
        {
            "id": "https://slx-world.top/backend/framework/dubbo/dubbo-notes/",
            "url": "https://slx-world.top/backend/framework/dubbo/dubbo-notes/",
            "title": "Dubbo 笔记",
            "date_published": "2024-11-11T16:00:00.000Z",
            "content_html": "<h1 id=\"️dubbo-概念\"><a class=\"anchor\" href=\"#️dubbo-概念\">#</a> ⚓️Dubbo 概念</h1>\n<p>Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。</p>\n<p>致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cDovL2R1YmJvLmFwYWNoZS5vcmcv\">http://dubbo.apache.org</span></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303185436948.png\" alt=\"image-20250303185436948\" /></p>\n<p><strong>节点角色说明：</strong></p>\n<ul>\n<li><span class=\"red\"><strong>Provider</strong></span>：暴露服务的服务提供方</li>\n<li><span class=\"red\"><strong>Container</strong></span>：服务运行容器</li>\n<li><span class=\"red\"><strong>Consumer</strong></span>：调用远程服务的服务消费方</li>\n<li><span class=\"red\"><strong>Registry</strong></span>：服务注册与发现的注册中心</li>\n<li><span class=\"red\"><strong>Monitor</strong></span>：统计服务的调用次数和调用时间的监控中心</li>\n</ul>\n<h1 id=\"️dubbo-高级特性\"><a class=\"anchor\" href=\"#️dubbo-高级特性\">#</a> ⚓️Dubbo 高级特性</h1>\n<h2 id=\"dubbo-admin\"><a class=\"anchor\" href=\"#dubbo-admin\">#</a> 🔩dubbo-admin</h2>\n<ul>\n<li>dubbo-admin 管理平台，是图形化的服务管理页面</li>\n<li>从注册中心中获取到所有的提供者 / 消费者进行配置管理</li>\n<li>路由规则、动态配置、服务降级、访问控制、权重调整、负载均衡等管理功能</li>\n<li>dubbo-admin 是一个前后端分离的项目。前端使用 vue，后端使用 springboot</li>\n<li>安装 dubbo-admin 其实就是部署该项目</li>\n</ul>\n<h2 id=\"序列化\"><a class=\"anchor\" href=\"#序列化\">#</a> 🔩序列化</h2>\n<p><span ​.​r​e​d​=\"\"><strong>两个机器传输数据，如何传输 Java 对象</strong>​</span>❓</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303202530115.png\" alt=\"image-20250303202530115\" /></p>\n<ul>\n<li>dubbo 内部已经将序列化和反序列化的过程内部封装了</li>\n<li>我们只需要在定义 pojo 类时实现 Serializable 接口即可</li>\n<li>一般会定义一个公共的 pojo 模块，让生产者和消费者都依赖该模块</li>\n</ul>\n<h2 id=\"地址缓存\"><a class=\"anchor\" href=\"#地址缓存\">#</a> 🔩地址缓存</h2>\n<p><span class=\"red\"><strong>注册中心挂了，服务是否可以正常访问？</strong></span>❓</p>\n<ul>\n<li>可以，因为 dubbo 服务消费者在第一次调用时，会将服务提供方地址缓存到本地，以后在调用则不会访问注册中心。</li>\n<li>当服务提供者地址发生变化时，注册中心会通知服务消费者。</li>\n</ul>\n<h2 id=\"超时与重试\"><a class=\"anchor\" href=\"#超时与重试\">#</a> 🔩超时与重试</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303202815424.png\" alt=\"image-20250303202815424\" /></p>\n<ul>\n<li>\n<p>服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去</p>\n</li>\n<li>\n<p>在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩</p>\n</li>\n<li>\n<p>dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。</p>\n</li>\n<li>\n<p>使用 timeout 属性配置超时时间，默认值 1000，单位毫秒。</p>\n</li>\n<li>\n<p>设置了超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。</p>\n</li>\n<li>\n<p>如果出现网络抖动，则这一次请求就会失败。</p>\n</li>\n<li>\n<p>Dubbo 提供重试机制来避免类似问题的发生。</p>\n</li>\n<li>\n<p>通过 retries  属性来设置重试次数。默认为 2 次。</p>\n</li>\n</ul>\n<h2 id=\"多版本\"><a class=\"anchor\" href=\"#多版本\">#</a> 🔩多版本</h2>\n<ul>\n<li>灰度发布：当出现新功能时，会让一部分用户先使用新功能，用户反馈没问题时，再将所有用户迁移到新功能。</li>\n<li>dubbo 中使用 version 属性来设置和调用同一个接口的不同版本</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303203251448.png\" alt=\"image-20250303203251448\" /></p>\n<h2 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 🔩负载均衡</h2>\n<p>负载均衡策略（4 种）：</p>\n<ul>\n<li><span class=\"red\">Random </span>：按权重随机，默认值。按权重设置随机概率。</li>\n<li><span class=\"red\">RoundRobin </span> ：按权重轮询。</li>\n<li><span class=\"red\">LeastActive </span>：最少活跃调用数，相同活跃数的随机。</li>\n<li><span class=\"red\">ConsistentHash </span>：一致性 Hash，相同参数的请求总是发到同一提供者。</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303203534332.png\" alt=\"image-20250303203534332\" /></p>\n<h2 id=\"集群容错\"><a class=\"anchor\" href=\"#集群容错\">#</a> 🔩集群容错</h2>\n<p>集群容错模式：</p>\n<ul>\n<li><span class=\"red\">Failover Cluster</span>：失败重试。默认值。当出现失败，重试其它服务器 ，默认重试 2 次，使用 retries 配置。一般用于读操作</li>\n<li><span class=\"red\">Failfast Cluster </span>：快速失败，只发起一次调用，失败立即报错。通常用于写操作。</li>\n<li><span class=\"red\">Failsafe Cluster </span>：失败安全，出现异常时，直接忽略。返回一个空结果。</li>\n<li><span class=\"red\">Failback Cluster </span>：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li>\n<li><span class=\"red\">Forking Cluster</span> ：并行调用多个服务器，只要一个成功即返回。</li>\n<li><span class=\"red\">Broadcast  Cluster </span>：广播调用所有提供者，逐个调用，任意一台报错则报错。</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/framework/dubbo/image-20250303204059546.png\" alt=\"image-20250303204059546\" /></p>\n<h2 id=\"服务降级\"><a class=\"anchor\" href=\"#服务降级\">#</a> 🔩服务降级</h2>\n<ul>\n<li><span class=\"red\">Random LoadBalance</span></li>\n</ul>\n",
            "tags": [
                "Backend",
                "Framework",
                "Dubbo"
            ]
        },
        {
            "id": "https://slx-world.top/bigdata/sql/day01/",
            "url": "https://slx-world.top/bigdata/sql/day01/",
            "title": "MySQL 条件查询",
            "date_published": "2024-11-10T16:00:00.000Z",
            "content_html": "<h1 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>等于</td>\n<td>=</td>\n</tr>\n<tr>\n<td>大于</td>\n<td>&gt;</td>\n</tr>\n<tr>\n<td>大于等于</td>\n<td>&gt;=</td>\n</tr>\n<tr>\n<td>小于</td>\n<td>&lt;</td>\n</tr>\n<tr>\n<td>小于等于</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>不等于</td>\n<td>!= 或 <span class=\"red\">&lt;&gt;</span></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<table>\n<thead>\n<tr>\n<th>与</th>\n<th>and</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>或</td>\n<td>or</td>\n</tr>\n<tr>\n<td>非</td>\n<td>not</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"where-条件查询\"><a class=\"anchor\" href=\"#where-条件查询\">#</a> where 条件查询</h1>\n<h2 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h2>\n<p><span class=\"red\">like</span> 是模糊查询关键字</p>\n<ul>\n<li><span class=\"yellow\">%</span>：多个任意字符</li>\n<li><span class=\"yellow\">_</span>：一个任意字符</li>\n</ul>\n<h2 id=\"范围查询\"><a class=\"anchor\" href=\"#范围查询\">#</a> 范围查询</h2>\n<ul>\n<li><span class=\"yellow\">between ... and ...</span>：在一个连续的范围内查询</li>\n<li><span class=\"yellow\">in</span>：在一个非连续的范围内查询</li>\n</ul>\n<h2 id=\"空判断查询\"><a class=\"anchor\" href=\"#空判断查询\">#</a> 空判断查询</h2>\n<ul>\n<li>判断为空使用：<span class=\"red\">is null</span></li>\n<li>判断非空使用：<span class=\"red\">is not null</span></li>\n</ul>\n<div class=\"note warning\">\n<ul>\n<li>不能使用 <span class=\"yellow\">= null</span> 判断为空</li>\n<li>不能使用 <span class=\"yellow\">!= null</span> 判断非空</li>\n</ul>\n</div>\n<h1 id=\"order-by-排序查询\"><a class=\"anchor\" href=\"#order-by-排序查询\">#</a> order by 排序查询</h1>\n<p>排序使用 <span class=\"red\">order by</span> 关键字</p>\n<ul>\n<li><span class=\"yellow\">asc</span>：升序</li>\n<li><span class=\"yellow\">desc</span>：降序</li>\n</ul>\n<h1 id=\"limit-分页查询\"><a class=\"anchor\" href=\"#limit-分页查询\">#</a> limit 分页查询</h1>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>limit 分页查询</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">limit</span> <span class=\"token punctuation\">(</span>当前页码 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> 每页数量<span class=\"token punctuation\">,</span> 每页数量</pre></td></tr></table></figure><h1 id=\"扩展mysql-五子句\"><a class=\"anchor\" href=\"#扩展mysql-五子句\">#</a> 扩展：MySQL 五子句</h1>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>MySQL 五子句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 数据表 <span class=\"token keyword\">where</span> 子句 <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 分组子句 <span class=\"token keyword\">having</span> 子句 <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> 子句 <span class=\"token keyword\">limit</span> 子句</pre></td></tr></table></figure><ol>\n<li>where</li>\n<li>group by</li>\n<li>having</li>\n<li>order by</li>\n<li>limit</li>\n</ol>\n<p>合称 MySQL 五子句，五子句顺序不能颠倒</p>\n<h1 id=\"聚合函数组函数\"><a class=\"anchor\" href=\"#聚合函数组函数\">#</a> 聚合函数（组函数）</h1>\n<table>\n<thead>\n<tr>\n<th>总行数</th>\n<th>count(col)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最大值</td>\n<td>max(col)</td>\n</tr>\n<tr>\n<td>最小值</td>\n<td>min(col)</td>\n</tr>\n<tr>\n<td>求和</td>\n<td>sum(col)</td>\n</tr>\n<tr>\n<td>求平均</td>\n<td>avg(col)</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\">\n<p><span class=\"red\">ifnull()</span> 函数：表示判断指定字段的值是否为 null，如果为空，则使用自己提供的值</p>\n<ul>\n<li><span class=\"red\">ifnull (字段，默认值)</span>：如果这个字段为 null，系统会自动将其设置为默认值</li>\n</ul>\n</div>\n<h2 id=\"聚合函数的特点\"><a class=\"anchor\" href=\"#聚合函数的特点\">#</a> 聚合函数的特点</h2>\n<p>聚合函数默认忽略字段为 null 的记录，如果想要列值为 null 的记录也参与计算，必须使用 <span class=\"red\">ifnull()</span> 函数对 null 值做替换</p>\n<h1 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h1>\n<h2 id=\"分组查询介绍\"><a class=\"anchor\" href=\"#分组查询介绍\">#</a> 分组查询介绍</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>分组查询语法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> 列名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">having</span> 条件表达式<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">with rollup</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>列名：是指按照指定字段的值进行分组</li>\n<li>having 条件表达式：用来过滤分组后的数据</li>\n<li>with rollup：在所有记录的最后加上一条记录，显示 select 查询时聚合函数的统计和计算结果</li>\n</ul>\n<h2 id=\"group-by-的使用\"><a class=\"anchor\" href=\"#group-by-的使用\">#</a> group by 的使用</h2>\n<p>group by 可用于单个字段分组，也可用于多个字段分组</p>\n<ol>\n<li>group by 可以实现去重操作</li>\n<li>group by 的作用是为了实现分组统计，<span class=\"yellow\">group by</span> 与<span class=\"yellow\">聚合函数</span>搭配使用</li>\n</ol>\n<h2 id=\"group-by-搭配-group_concat\"><a class=\"anchor\" href=\"#group-by-搭配-group_concat\">#</a> group by 搭配 group_concat ()</h2>\n<p><span class=\"red\">group_concat (字段名)</span>：统计每个分组指定字段的信息集合，每个信息之间使用逗号进行分割</p>\n<h2 id=\"group-by-搭配-having\"><a class=\"anchor\" href=\"#group-by-搭配-having\">#</a> group by 搭配 having</h2>\n<p><span class=\"red\">having</span> 作用和 where 类似，都是过滤数据的，但 having 是过滤分组数据的，只能用于 group by</p>\n<h2 id=\"group-by-搭配-with-rollup\"><a class=\"anchor\" href=\"#group-by-搭配-with-rollup\">#</a> group by 搭配 with rollup</h2>\n<p><span class=\"red\">with rollup</span> 的作用是：在最后记录后面新增一行，显示 select 查询时聚合函数的统计和计算结果</p>\n<h1 id=\"连接查询之内-外-自连接\"><a class=\"anchor\" href=\"#连接查询之内-外-自连接\">#</a> 连接查询之内、外、自连接</h1>\n<h2 id=\"交叉连接了解\"><a class=\"anchor\" href=\"#交叉连接了解\">#</a> 交叉连接（了解）</h2>\n<p>没有意思，但是它是所有连接的基础。其功能就是将表 1 和表 2 中的每一条数据进行连接。</p>\n<p>结果：</p>\n<ul>\n<li>\n<p>字段数 = 表 1 字段 + 表 2 的字段</p>\n</li>\n<li>\n<p>记录数 = 表 1 中的总数量 * 表 2 中的总数量（笛卡尔积）</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>交叉连接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> students <span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> classes<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>交叉连接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> students<span class=\"token punctuation\">,</span> classes<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"内连接\"><a class=\"anchor\" href=\"#内连接\">#</a> 内连接</h2>\n<p>连接查询可以分为:</p>\n<ol>\n<li>内连接查询</li>\n<li>左连接查询</li>\n<li>右连接查询</li>\n<li>自连接查询</li>\n</ol>\n<h3 id=\"内连接查询\"><a class=\"anchor\" href=\"#内连接查询\">#</a> 内连接查询</h3>\n<p>查询两个表中符合条件的共有记录</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241114232701203.png\" alt=\"image-20241114232701203\" /></p>\n<p><strong>内连接查询语法格式:</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>内连接查询</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 表<span class=\"token number\">2.</span>字段<span class=\"token number\">2</span></pre></td></tr></table></figure><ul>\n<li><span class=\"yellow\">inner join</span>：内连接查询关键字</li>\n<li><span class=\"yellow\">on</span>：连接查询条件</li>\n</ul>\n<h2 id=\"左外连接\"><a class=\"anchor\" href=\"#左外连接\">#</a> 左外连接</h2>\n<h3 id=\"左连接查询\"><a class=\"anchor\" href=\"#左连接查询\">#</a> 左连接查询</h3>\n<p>以左表为主根据条件查询右表数据，如果根据条件查询右表数据不存在使用 null 值填充</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241114233245081.png\" alt=\"image-20241114233245081\" /></p>\n<p><strong>左连接查询语法格式:</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>左连接查询</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 表<span class=\"token number\">2.</span>字段<span class=\"token number\">2</span></pre></td></tr></table></figure><ul>\n<li><span class=\"yellow\">left join</span>：左连接查询关键字</li>\n<li><span class=\"yellow\">on</span>：连接查询条件</li>\n<li><span class=\"yellow\">表 1</span>：左表</li>\n<li><span class=\"yellow\">表 2</span>：右表</li>\n</ul>\n<h2 id=\"右外连接\"><a class=\"anchor\" href=\"#右外连接\">#</a> 右外连接</h2>\n<h3 id=\"右外连接查询\"><a class=\"anchor\" href=\"#右外连接查询\">#</a> 右外连接查询</h3>\n<p>以右表为主根据条件查询左表数据，如果根据条件查询左表数据不存在使用 null 值填充</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241114233628006.png\" alt=\"image-20241114233628006\" /></p>\n<p><strong>右连接查询语法格式:</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>右外连接查询</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 字段 <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 表<span class=\"token number\">2.</span>字段<span class=\"token number\">2</span></pre></td></tr></table></figure><ul>\n<li><span class=\"yellow\">right join</span>：右连接查询关键字</li>\n<li><span class=\"yellow\">on</span>：连接查询条件</li>\n<li><span class=\"yellow\">表 1</span>：左表</li>\n<li><span class=\"yellow\">表 2</span>：右表</li>\n</ul>\n<h2 id=\"自连接\"><a class=\"anchor\" href=\"#自连接\">#</a> 自连接</h2>\n<h3 id=\"自连接查询\"><a class=\"anchor\" href=\"#自连接查询\">#</a> 自连接查询</h3>\n<p>左表和右表是同一个表，根据连接查询条件查询两个表中的数据。</p>\n<h1 id=\"子查询三步走\"><a class=\"anchor\" href=\"#子查询三步走\">#</a> 子查询（三步走）</h1>\n<p>在一个 select 语句中，嵌入了另外一个 select 语句，那么被嵌入的 select 语句称之为子查询语句，外部那个 select 语句则称为主查询.</p>\n<p><strong>主查询和子查询的关系:</strong></p>\n<ol>\n<li>子查询是嵌入到主查询中</li>\n<li>子查询是辅助主查询的，要么充当条件，要么充当数据源（数据表）</li>\n<li>子查询是可以独立存在的语句，是一条完整的 select 语句</li>\n</ol>\n<div class=\"note info\">\n<p>子查询是一个完整的 SQL 语句，子查询被嵌入到一对小括号里面</p>\n</div>\n<h1 id=\"数据库设计三范式了解\"><a class=\"anchor\" href=\"#数据库设计三范式了解\">#</a> 数据库设计三范式（了解）</h1>\n<p>范式：对设计数据库提出的一些规范，目前有迹可寻的共有 8 种范式，一般遵守 3 范式即可。</p>\n<ul>\n<li>第一范式（1NF）：强调的是列的<span class=\"red\">原子性</span>，即列不能够再分成其他几列。</li>\n<li>第二范式（2NF）：满足 1NF，另外包含两部分内容，一是表必须有<span class=\"red\">一个主键</span>；二是<span class=\"red\">非主键字段 必须完全依赖于主键，而不能只依赖于主键的一部分</span>。（一个表中只能有一类数据）</li>\n<li>第三范式（3NF）：满足 2NF，另外<span class=\"red\">非主键列必须直接依赖于主键，不能存在传递依赖</span>。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。（非主键字段必须直接依赖主键）</li>\n</ul>\n<h2 id=\"e-r-模型的介绍\"><a class=\"anchor\" href=\"#e-r-模型的介绍\">#</a> E-R 模型的介绍</h2>\n<p>E-R 模型即<span class=\"red\">实体 - 关系</span>模型，E-R 模型就是描述数据库存储数据的结构模型。</p>\n<p><strong>E-R 模型的使用场景:</strong></p>\n<ol>\n<li>对于大型公司开发项目，我们需要根据产品经理的设计，我们先使用建模工具，如: power designer，db desinger 等这些软件来画出实体 - 关系模型（E-R 模型）</li>\n<li>然后根据三范式设计数据库表结构</li>\n</ol>\n<p><strong>E-R 模型的效果图:</strong></p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241114235251067.png\" alt=\"image-20241114235251067\" /></p>\n<ul>\n<li>实体：用矩形表示，并标注实体名称</li>\n<li>属性：用椭圆表示，并标注属性名称，</li>\n<li>关系：用菱形表示，并标注关系名称</li>\n<li>一对一</li>\n<li>一对多</li>\n<li>多对多</li>\n</ul>\n<h1 id=\"外键扩展\"><a class=\"anchor\" href=\"#外键扩展\">#</a> 外键（扩展）</h1>\n<ul>\n<li>主键：<span class=\"red\">primary key</span></li>\n<li>外键：<span class=\"red\">foreign key</span>（应用场景：在两表或多表关联的时候设置的，用于标志两个表之间的联系）</li>\n</ul>\n<h2 id=\"外键约束作用\"><a class=\"anchor\" href=\"#外键约束作用\">#</a> 外键约束作用</h2>\n<ul>\n<li>外键约束：对外键字段的值进行更新和插入时会和引用表中字段的数据进行验证，数据如果不合法则更新和插入会失败，保证数据的有效性。</li>\n<li>外键设计原则：保证两张表的关联关系，保证数据的一致性。在选择时，一般在一个表中时关联字段，在另外一个表中是主键，则这个字段建议设置为外键。</li>\n</ul>\n<div class=\"note info\">\n<p>SET FOREIGN_KEY_CHECKS=0 外键检查</p>\n</div>\n<ul>\n<li>\n<p>添加外键约束:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 从表 <span class=\"token keyword\">add</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>外键字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> 主表<span class=\"token punctuation\">(</span>主键字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除外键约束:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">drop</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> 外键名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "BigData",
                "SQL"
            ]
        },
        {
            "id": "https://slx-world.top/bigdata/sql/day02/",
            "url": "https://slx-world.top/bigdata/sql/day02/",
            "title": "窗口函数",
            "date_published": "2024-11-10T16:00:00.000Z",
            "content_html": "<h1 id=\"窗口函数简介\"><a class=\"anchor\" href=\"#窗口函数简介\">#</a> 窗口函数简介</h1>\n<h2 id=\"什么是窗口函数\"><a class=\"anchor\" href=\"#什么是窗口函数\">#</a> 什么是窗口函数</h2>\n<ul>\n<li>\n<p>窗口函数是类似于可以返回聚合值的函数，例如 SUM ()，COUNT ()，MAX ()。但是窗口函数又与普通的聚合函数不同，它不会对结果进行分组，使得输出中的行数与输入中的行数相同。</p>\n</li>\n<li>\n<p>一个窗口函数大概看起来是这样：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">OVER</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">PARTITION</span> <span class=\"token keyword\">BY</span> ___ <span class=\"token keyword\">ORDER</span> BY___<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">Table</span></pre></td></tr></table></figure><ul>\n<li>\n<p>聚合功能：在上述例子中，我们用了 SUM ()，但是你也可以用 COUNT ()， AVAVG () 之类的计算功能</p>\n</li>\n<li>\n<p>PAPARTITION BY：你只需将它看成 GROUP BY 子句，但是在窗口函数中，你要写 PAPARTITION BY</p>\n</li>\n<li>\n<p>ORDER BY：ORDER BY 和普通查询语句中的 ORDER BY 没什么不同。注意，输出的顺序要仔细考虑</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"窗口函数的优点\"><a class=\"anchor\" href=\"#窗口函数的优点\">#</a> 窗口函数的优点</h2>\n<blockquote>\n<ul>\n<li>\n<p>简单</p>\n<ul>\n<li>窗口函数更易于使用。</li>\n</ul>\n</li>\n<li>\n<p>快速</p>\n<ul>\n<li>这一点与上一点相关，使用窗口函数比使用替代方法要快得多。当你处理成百上千个千兆字节的数据时，这非常有用。</li>\n</ul>\n</li>\n<li>\n<p>多功能性</p>\n<ul>\n<li>最重要的是，窗口函数具有多种功能，比如，添加移动平均线，添加行号和滞后数据，等等。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"over\"><a class=\"anchor\" href=\"#over\">#</a> over()</h1>\n",
            "tags": [
                "BigData",
                "SQL"
            ]
        },
        {
            "id": "https://slx-world.top/bigdata/hadoop/introduction/",
            "url": "https://slx-world.top/bigdata/hadoop/introduction/",
            "title": "Hadoop 入门",
            "date_published": "2024-10-27T16:00:00.000Z",
            "content_html": "<h1 id=\"hadoop-概述\"><a class=\"anchor\" href=\"#hadoop-概述\">#</a> 😽Hadoop 概述</h1>\n<h2 id=\"hadoop-是什么\"><a class=\"anchor\" href=\"#hadoop-是什么\">#</a> 🍖Hadoop 是什么</h2>\n<ul>\n<li>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构</li>\n<li>主要解决，海量数据的<span class=\"red\">存储</span>和<span class=\"red\">分析计算</span>问题。</li>\n<li>广义上来说，Hadoop 通常是指一个更广泛的概念 ——Hadoop 生态圈。</li>\n</ul>\n<h2 id=\"hadoop-优势4-高\"><a class=\"anchor\" href=\"#hadoop-优势4-高\">#</a> 🍖Hadoop 优势（4 高）</h2>\n<ul>\n<li><span class=\"red\">高可靠性</span>：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>\n<li><span class=\"red\">高扩展性</span>：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>\n<li><span class=\"red\">高效性</span>：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>\n<li><span class=\"red\">高容错性</span>：能够自动将失败的任务重新分配。</li>\n</ul>\n<h2 id=\"hadoop-组成\"><a class=\"anchor\" href=\"#hadoop-组成\">#</a> 🍖Hadoop 组成</h2>\n<p>Hadoop 1.x 组成：​​</p>\n<ul>\n<li><span class=\"red\">MapReduce（计算 + 资源调度）</span></li>\n<li><span class=\"red\">HDFS（数据存储）</span></li>\n<li><span class=\"red\">Common（辅助工具）</span></li>\n</ul>\n<p>Hadoop 2.x/ 3.x 组成：</p>\n<ul>\n<li><span class=\"red\">MapReduce（计算）</span></li>\n<li><span class=\"rainbow\">Yarn（资源调度）</span></li>\n<li><span class=\"red\">HDFS（数据存储）</span></li>\n<li><span class=\"red\">Common（辅助工具）</span></li>\n</ul>\n<h3 id=\"hdfs-架构\"><a class=\"anchor\" href=\"#hdfs-架构\">#</a> 🐶HDFS 架构</h3>\n<p>Hadoop Distributed File System，简称 HDFS，是一个分布式文件系统。</p>\n<ul>\n<li>NameNode（nn）：存储文件的<span class=\"red\">元数据</span>，如<span class=\"red\">文件名</span>，<span class=\"red\">文件目录结构</span>，<span class=\"red\">文件属性</span>（生成时间、副本数、文件权限），以及每个文件的<span class=\"red\">块列表</span>和<span class=\"red\">块所在的 DataNode</span> 等。</li>\n<li>DataNode (dn)：在本地文件系统存储<span class=\"red\">文件块数据</span>，以及<span class=\"red\">块数据的校验和</span>。</li>\n<li>Secondary NameNode(2nn)：<span class=\"red\">每隔一段时间对 NameNode 元数据备份</span>。</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/bigdata/hadoop/image-20250302193347478.png\" alt=\"image-20250302193347478\" /></p>\n<h3 id=\"yarn-架构\"><a class=\"anchor\" href=\"#yarn-架构\">#</a> 🐶Yarn 架构</h3>\n<p>Yet Another Resource Negotiator 简称 YARN ，另一种资源协调者，是 Hadoop 的资源管理器。</p>\n<ul>\n<li>ResourceManager（RM）：整个集群资源（内存、CPU 等）的老大</li>\n<li>NodeManager（NM）：单个节点服务器资源老大</li>\n<li>ApplicationMaster（AM）：单个任务运行的老大</li>\n<li>Container：容器，相当一台独立的服务器，里面封装了任务运行所需要的资源，如<span class=\"red\">内存、CPU、磁盘、网络</span>等。</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/bigdata/hadoop/image-20250302193047871.png\" alt=\"image-20250302193047871\" /></p>\n<div class=\"note primary\">\n<ul>\n<li>\n<p>客户端可以有多个</p>\n</li>\n<li>\n<p>集群上可以运行多个 ApplicationMaster</p>\n</li>\n<li>\n<p>每个 NodeManager 上可以有多个 Container</p>\n</li>\n</ul>\n</div>\n<h3 id=\"mapreduce-架构\"><a class=\"anchor\" href=\"#mapreduce-架构\">#</a> 🐶MapReduce 架构</h3>\n<p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce</p>\n<ul>\n<li>\n<p>Map 阶段<span class=\"red\">并行</span>处理输入数据</p>\n</li>\n<li>\n<p>Reduce 阶段对 Map 结果进行<span class=\"red\">汇总</span></p>\n</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/bigdata/hadoop/image-20250302193857335.png\" alt=\"image-20250302193857335\" /></p>\n",
            "tags": [
                "BigData",
                "Hadoop"
            ]
        },
        {
            "id": "https://slx-world.top/backend/database/redis/distributed-cache/",
            "url": "https://slx-world.top/backend/database/redis/distributed-cache/",
            "title": "Redis 高级篇",
            "date_published": "2024-10-21T16:00:00.000Z",
            "content_html": "<h1 id=\"redis-持久化\"><a class=\"anchor\" href=\"#redis-持久化\">#</a> 🎨Redis 持久化</h1>\n<p>Redis 有两种持久化方案：</p>\n<ul>\n<li>RDB 持久化</li>\n<li>AOF 持久化</li>\n</ul>\n<h2 id=\"rdb-持久化\"><a class=\"anchor\" href=\"#rdb-持久化\">#</a> 🎁RDB 持久化</h2>\n<p>RDB 全称 Redis Database Backup file（Redis 数据备份文件），也被叫做 Redis 数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当 Redis 实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为 RDB 文件，默认是保存在当前运行目录。</p>\n<h3 id=\"执行时机\"><a class=\"anchor\" href=\"#执行时机\">#</a> 🎈执行时机</h3>\n<p>RDB 持久化在四种情况下会执行：</p>\n<ul>\n<li><span class=\"red\">执行 save 命令</span></li>\n<li><span class=\"red\">执行 bgsave 命令</span></li>\n<li><span class=\"red\">Redis 停机时</span></li>\n<li><span class=\"red\">触发 RDB 条件时</span></li>\n</ul>\n<ol>\n<li>\n<p><strong>save 命令</strong></p>\n<p>执行下面的命令，可以立即执行一次 RDB：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20250302144355562.png\" alt=\"image-20250302144355562\" /></p>\n<p>save 命令会导致主进程执行 RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p>\n</li>\n<li>\n<p><strong>bgsave 命令</strong></p>\n<p>下面的命令可以异步执行 RDB：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725144725943.png\" alt=\"image-20210725144725943\" /></p>\n<p>这个命令执行后会开启独立进程完成 RDB，主进程可以持续处理用户请求，不受影响。</p>\n</li>\n<li>\n<p><strong>停机时</strong></p>\n<p>Redis 停机时会执行一次 save 命令，实现 RDB 持久化。</p>\n</li>\n<li>\n<p><strong>触发 RDB 条件</strong></p>\n<p>Redis 内部有触发 RDB 的机制，可以在 redis.conf 文件中找到，格式如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>redis.conf</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 900 秒内，如果至少有 1 个 key 被修改，则执行 bgsave ， 如果是 save \"\" 则表示禁用 RDB</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">save</span> <span class=\"token value attr-value\">900 1  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">save</span> <span class=\"token value attr-value\">300 10  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">save</span> <span class=\"token value attr-value\">60 10000</span></pre></td></tr></table></figure><p>RDB 的其它配置也可以在 redis.conf 文件中设置：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>redis.conf</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 是否压缩，建议不开启，压缩也会消耗 cpu，磁盘的话不值钱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">rdbcompression</span> <span class=\"token value attr-value\">yes</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># RDB 文件名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">dbfilename</span> <span class=\"token value attr-value\">dump.rdb  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 文件保存的路径目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">dir</span> <span class=\"token value attr-value\">./</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"rdb-原理\"><a class=\"anchor\" href=\"#rdb-原理\">#</a> 🎈RDB 原理</h3>\n<p>bgsave 开始时会 fork 主进程得到子进程，子进程共享主进程的内存数据。完成 fork 后读取内存数据并写入 RDB 文件。</p>\n<p>fork 采用的是<span class=\"red\"> copy-on-write</span> 技术：</p>\n<ul>\n<li>当主进程执行读操作时，访问共享内存；</li>\n<li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725151319695.png\" alt=\"image-20210725151319695\" /></p>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 🎈小结</h3>\n<p>RDB 方式 bgsave 的基本流程？</p>\n<ul>\n<li>fork 主进程得到一个子进程，共享内存空间</li>\n<li>子进程读取内存数据并写入新的 RDB 文件</li>\n<li>用新 RDB 文件替换旧的 RDB 文件</li>\n</ul>\n<p>RDB 会在什么时候执行？save 60 1000 代表什么含义？</p>\n<ul>\n<li>默认是服务停止时</li>\n<li>代表 60 秒内至少执行 1000 次修改则触发 RDB</li>\n</ul>\n<p>RDB 的缺点？</p>\n<ul>\n<li>RDB 执行间隔时间长，两次 RDB 之间写入数据有丢失的风险</li>\n<li>fork 子进程、压缩、写出 RDB 文件都比较耗时</li>\n</ul>\n<h2 id=\"aof-持久化\"><a class=\"anchor\" href=\"#aof-持久化\">#</a> 🎁AOF 持久化</h2>\n<h3 id=\"aof原理\"><a class=\"anchor\" href=\"#aof原理\">#</a> 🎈AOF 原理</h3>\n<p>AOF 全称为 Append Only File（追加文件）。Redis 处理的每一个写命令都会记录在 AOF 文件，可以看做是命令日志文件。</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725151543640.png\" alt=\"image-20210725151543640\" /></p>\n<h3 id=\"aof-配置\"><a class=\"anchor\" href=\"#aof-配置\">#</a> 🎈AOF 配置</h3>\n<p>AOF 默认是关闭的，需要修改 redis.conf 配置文件来开启 AOF：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>redis.conf</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 是否开启 AOF 功能，默认是 no</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">appendonly</span> <span class=\"token value attr-value\">yes</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># AOF 文件的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">appendfilename</span> <span class=\"token value attr-value\">\"appendonly.aof\"</span></pre></td></tr></table></figure><p>AOF 的命令记录的频率也可以通过 redis.conf 文件来配：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>redis.conf</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表示每执行一次写命令，立即记录到 AOF 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">appendfsync</span> <span class=\"token value attr-value\">always </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 写命令执行完先放入 AOF 缓冲区，然后表示每隔 1 秒将缓冲区数据写到 AOF 文件，是默认方案</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">appendfsync</span> <span class=\"token value attr-value\">everysec </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 写命令执行完先放入 AOF 缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">appendfsync</span> <span class=\"token value attr-value\">no</span></pre></td></tr></table></figure><p>三种策略对比：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725151654046.png\" alt=\"image-20210725151654046\" /></p>\n<h3 id=\"aof-文件重写\"><a class=\"anchor\" href=\"#aof-文件重写\">#</a> 🎈AOF 文件重写</h3>\n<p>因为是记录命令，AOF 文件会比 RDB 文件大的多。而且 AOF 会记录对同一个 key 的多次写操作，但只有最后一次写操作才有意义。通过执行 bgrewriteaof 命令，可以让 AOF 文件执行重写功能，用最少的命令达到相同效果。</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725151729118.png\" alt=\"image-20210725151729118\" /></p>\n<p>如图，AOF 原本有三个命令，但是 <code>set num 123 和 set num 666</code>  都是对 num 的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p>\n<p>所以重写命令后，AOF 文件内容就是： <code>mset name jack num 666</code></p>\n<p>Redis 也会在触发阈值时自动去重写 AOF 文件。阈值也可以在 redis.conf 中配置：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>redis.conf</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># AOF 文件比上次文件 增长超过多少百分比则触发重写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">auto-aof-rewrite-percentage</span> <span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># AOF 文件体积最小多大以上才触发重写 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">auto-aof-rewrite-min-size</span> <span class=\"token value attr-value\">64mb</span></pre></td></tr></table></figure><h2 id=\"rdb-与aof-对比\"><a class=\"anchor\" href=\"#rdb-与aof-对比\">#</a> 🎁RDB 与 AOF 对比</h2>\n<p>RDB 和 AOF 各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725151940515.png\" alt=\"image-20210725151940515\" /></p>\n<h1 id=\"redis-主从\"><a class=\"anchor\" href=\"#redis-主从\">#</a> 🎨Redis 主从</h1>\n<h2 id=\"主从数据同步原理\"><a class=\"anchor\" href=\"#主从数据同步原理\">#</a> 🎁主从数据同步原理</h2>\n<h3 id=\"全量同步\"><a class=\"anchor\" href=\"#全量同步\">#</a> 🎈全量同步</h3>\n<p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将 master 节点的所有数据都拷贝给 slave 节点</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725152222497.png\" alt=\"image-20210725152222497\" /></p>\n<p>这里有一个问题，master 如何得知 salve 是第一次来连接呢？？</p>\n<p>有几个概念，可以作为判断依据：</p>\n<ul>\n<li><span class=\"red\"><strong>Replication Id</strong></span>：简称 replid，是数据集的标记，id 一致则说明是同一数据集。每一个 master 都有唯一的 replid，slave 则会继承 master 节点的 replid</li>\n<li><span class=\"red\"><strong>offset</strong></span>：偏移量，随着记录在 repl_baklog 中的数据增多而逐渐增大。slave 完成同步时也会记录当前同步的 offset。如果 slave 的 offset 小于 master 的 offset，说明 slave 数据落后于 master，需要更新。</li>\n</ul>\n<p>因此 slave 做数据同步，必须向 master 声明自己的 replication id 和 offset，master 才可以判断到底需要同步哪些数据。</p>\n<p>因为 slave 原本也是一个 master，有自己的 replid 和 offset，当第一次变成 slave，与 master 建立连接时，发送的 replid 和 offset 是自己的 replid 和 offset。</p>\n<p>master 判断发现 slave 发送来的 replid 与自己的不一致，说明这是一个全新的 slave，就知道要做全量同步了。</p>\n<p>master 会将自己的 replid 和 offset 都发送给这个 slave，slave 保存这些信息。以后 slave 的 replid 就与 master 一致了。</p>\n<div class=\"note info\">\n<p>因此，<strong>master 判断一个节点是否是第一次同步的依据，就是看 replid 是否一致</strong>。</p>\n</div>\n<p>如图：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725152700914.png\" alt=\"image-20210725152700914\" /></p>\n<p>完整流程描述：</p>\n<ul>\n<li>slave 节点请求增量同步</li>\n<li>master 节点判断 replid，发现不一致，拒绝增量同步</li>\n<li>master 将完整内存数据生成 RDB，发送 RDB 到 slave</li>\n<li>slave 清空本地数据，加载 master 的 RDB</li>\n<li>master 将 RDB 期间的命令记录在 repl_baklog，并持续将 log 中的命令发送给 slave</li>\n<li>slave 执行接收到的命令，保持与 master 之间的同步</li>\n</ul>\n<h3 id=\"增量同步\"><a class=\"anchor\" href=\"#增量同步\">#</a> 🎈增量同步</h3>\n<p>全量同步需要先做 RDB，然后将 RDB 文件通过网络传输个 slave，成本太高了。因此除了第一次做全量同步，其它大多数时候 slave 与 master 都是做<strong>增量同步</strong>。</p>\n<p>什么是增量同步？就是只更新 slave 与 master 存在差异的部分数据。如图：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725153201086.png\" alt=\"image-20210725153201086\" /></p>\n<h3 id=\"repl_backlog原理\"><a class=\"anchor\" href=\"#repl_backlog原理\">#</a> 🎈repl_backlog 原理</h3>\n<p>master 怎么知道 slave 与自己的数据差异在哪里呢？</p>\n<p>这就要说到全量同步时的 repl_baklog 文件了。</p>\n<p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<span class=\"red\"><strong>角标到达数组末尾后，会再次从 0 开始读写</strong></span>，这样数组头部的数据就会被覆盖。</p>\n<p>repl_baklog 中会记录 Redis 处理过的命令日志及 offset，包括 master 当前的 offset，和 slave 已经拷贝到的 offset：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725153359022.png\" alt=\"image-20210725153359022\" /></p>\n<p>slave 与 master 的 offset 之间的差异，就是 salve 需要增量拷贝的数据了。</p>\n<p>随着不断有数据写入，master 的 offset 逐渐变大，slave 也不断的拷贝，追赶 master 的 offset：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725153524190.png\" alt=\"image-20210725153524190\" /></p>\n<p>直到数组被填满：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725153715910.png\" alt=\"image-20210725153715910\" /></p>\n<p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到 slave 的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p>\n<p>但是，如果 slave 出现网络阻塞，导致 master 的 offset 远远超过了 slave 的 offset：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725153937031.png\" alt=\"image-20210725153937031\" /></p>\n<p>如果 master 继续写入新数据，其 offset 就会覆盖旧的数据，直到将 slave 现在的 offset 也覆盖：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154155984.png\" alt=\"image-20210725154155984\" /></p>\n<p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果 slave 恢复，需要同步，却发现自己的 offset 都没有了，无法完成增量同步了。只能做全量同步。</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154216392.png\" alt=\"image-20210725154216392\" /></p>\n<h2 id=\"主从同步优化\"><a class=\"anchor\" href=\"#主从同步优化\">#</a> 🎁主从同步优化</h2>\n<p>主从同步可以保证主从数据的一致性，非常重要。</p>\n<p>可以从以下几个方面来优化 Redis 主从就集群：</p>\n<ul>\n<li>在 master 中配置 repl-diskless-sync yes 启用无磁盘复制，避免全量同步时的磁盘 IO。</li>\n<li>Redis 单节点上的内存占用不要太大，减少 RDB 导致的过多磁盘 IO</li>\n<li>适当提高 repl_baklog 的大小，发现 slave 宕机时尽快实现故障恢复，尽可能避免全量同步</li>\n<li>限制一个 master 上的 slave 节点数量，如果实在是太多 slave，则可以采用主 - 从 - 从链式结构，减少 master 压力</li>\n</ul>\n<p>主从从架构图：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154405899.png\" alt=\"image-20210725154405899\" /></p>\n<h2 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> 🎁小结</h2>\n<p>简述全量同步和增量同步区别？</p>\n<ul>\n<li>全量同步：master 将完整内存数据生成 RDB，发送 RDB 到 slave。后续命令则记录在 repl_baklog，逐个发送给 slave。</li>\n<li>增量同步：slave 提交自己的 offset 到 master，master 获取 repl_baklog 中从 offset 之后的命令给 slave</li>\n</ul>\n<p>什么时候执行全量同步？</p>\n<ul>\n<li>slave 节点第一次连接 master 节点时</li>\n<li>slave 节点断开时间太久，repl_baklog 中的 offset 已经被覆盖时</li>\n</ul>\n<p>什么时候执行增量同步？</p>\n<ul>\n<li>slave 节点断开又恢复，并且在 repl_baklog 中能找到 offset 时</li>\n</ul>\n<h1 id=\"redis哨兵\"><a class=\"anchor\" href=\"#redis哨兵\">#</a> 🎨Redis 哨兵</h1>\n<p>Redis 提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。</p>\n<h2 id=\"哨兵原理\"><a class=\"anchor\" href=\"#哨兵原理\">#</a> 🎁哨兵原理</h2>\n<h3 id=\"集群结构和作用\"><a class=\"anchor\" href=\"#集群结构和作用\">#</a> 🎈集群结构和作用</h3>\n<p>哨兵的结构如图：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154528072.png\" alt=\"image-20210725154528072\" /></p>\n<p>哨兵的作用如下：</p>\n<ul>\n<li><span class=\"red\"><strong>监控</strong></span>：Sentinel 会不断检查您的 master 和 slave 是否按预期工作</li>\n<li><span class=\"red\"><strong>自动故障恢复</strong></span>：如果 master 故障，Sentinel 会将一个 slave 提升为 master。当故障实例恢复后也以新的 master 为主</li>\n<li><span class=\"red\"><strong>通知</strong></span>：Sentinel 充当 Redis 客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给 Redis 的客户端</li>\n</ul>\n<h3 id=\"集群监控原理\"><a class=\"anchor\" href=\"#集群监控原理\">#</a> 🎈集群监控原理</h3>\n<p>Sentinel 基于<span class=\"red\">心跳机制</span>监测服务状态，每隔 1 秒向集群的每个实例发送<span class=\"red\"> ping</span> 命令：</p>\n<ul>\n<li>\n<p><span class=\"red\">主观下线</span>：如果某 sentinel 节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线</strong>。</p>\n</li>\n<li>\n<p><span class=\"red\">客观下线</span>：若超过指定数量（quorum）的 sentinel 都认为该实例主观下线，则该实例<strong>客观下线</strong>。quorum 值最好超过 Sentinel 实例数量的一半。</p>\n</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154632354.png\" alt=\"image-20210725154632354\" /></p>\n<h3 id=\"集群故障恢复原理\"><a class=\"anchor\" href=\"#集群故障恢复原理\">#</a> 🎈集群故障恢复原理</h3>\n<p>一旦发现 master 故障，sentinel 需要在 salve 中选择一个作为新的 master，选择依据是这样的：</p>\n<ul>\n<li>首先会判断 slave 节点与 master 节点断开时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该 slave 节点</li>\n<li>然后判断 slave 节点的 slave-priority 值，越小优先级越高，如果是 0 则永不参与选举</li>\n<li>如果 slave-prority 一样，则判断 slave 节点的 offset 值，越大说明数据越新，优先级越高</li>\n<li>最后是判断 slave 节点的运行 id 大小，越小优先级越高。</li>\n</ul>\n<p>当选出一个新的 master 后，该如何实现切换呢？</p>\n<p>流程如下：</p>\n<ul>\n<li>sentinel 给备选的 slave1 节点发送 slaveof no one 命令，让该节点成为 master</li>\n<li>sentinel 给所有其它 slave 发送 slaveof 192.168.150.101 7002 命令，让这些 slave 成为新 master 的从节点，开始从新的 master 上同步数据。</li>\n<li>最后，sentinel 将故障节点标记为 slave，当故障节点恢复后会自动成为新的 master 的 slave 节点</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725154816841.png\" alt=\"image-20210725154816841\" /></p>\n<h2 id=\"小结-3\"><a class=\"anchor\" href=\"#小结-3\">#</a> 🎁小结</h2>\n<p>Sentinel 的三个作用是什么？</p>\n<ul>\n<li><span class=\"red\">监控</span></li>\n<li><span class=\"red\">故障转移</span></li>\n<li><span class=\"red\">通知</span></li>\n</ul>\n<p>Sentinel 如何判断一个 redis 实例是否健康？</p>\n<ul>\n<li>每隔 1 秒发送一次 ping 命令，如果超过一定时间没有相向则认为是主观下线</li>\n<li>如果大多数 sentinel 都认为实例主观下线，则判定服务下线</li>\n</ul>\n<p>故障转移步骤有哪些？</p>\n<ul>\n<li>首先选定一个 slave 作为新的 master，执行 slaveof no one</li>\n<li>然后让所有节点都执行 slaveof 新 master</li>\n<li>修改故障节点配置，添加 slaveof 新 master</li>\n</ul>\n<h2 id=\"redistemplate\"><a class=\"anchor\" href=\"#redistemplate\">#</a> 🎁RedisTemplate</h2>\n<p>在 Sentinel 集群监管下的 Redis 主从集群，其节点会因为自动故障转移而发生变化，Redis 的客户端必须感知这种变化，及时更新连接信息。Spring 的 RedisTemplate 底层利用 lettuce 实现了节点的感知和自动切换。</p>\n<h3 id=\"配置redis地址\"><a class=\"anchor\" href=\"#配置redis地址\">#</a> 🎈配置 Redis 地址</h3>\n<p>然后在配置文件 application.yml 中指定 redis 的 sentinel 相关信息：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>application.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  redis<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      master<span class=\"token operator\">:</span> mymaster</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      nodes<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.150</span><span class=\"token number\">.101</span><span class=\"token operator\">:</span><span class=\"token number\">27001</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.150</span><span class=\"token number\">.101</span><span class=\"token operator\">:</span><span class=\"token number\">27002</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.150</span><span class=\"token number\">.101</span><span class=\"token operator\">:</span><span class=\"token number\">27003</span></pre></td></tr></table></figure><h3 id=\"配置读写分离\"><a class=\"anchor\" href=\"#配置读写分离\">#</a> 🎈配置读写分离</h3>\n<p>在项目的启动类中，添加一个新的 bean：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">LettuceClientConfigurationBuilderCustomizer</span> <span class=\"token function\">clientConfigurationBuilderCustomizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> clientConfigurationBuilder <span class=\"token operator\">-></span> clientConfigurationBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">readFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadFrom</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REPLICA_PREFERRED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个 bean 中配置的就是读写策略，包括四种：</p>\n<ul>\n<li><span class=\"red\">MASTER</span>：从主节点读取</li>\n<li><span class=\"red\">MASTER_PREFERRED</span>：优先从 master 节点读取，master 不可用才读取 replica</li>\n<li><span class=\"red\">REPLICA</span>：从 slave（replica）节点读取</li>\n<li><span class=\"red\">REPLICA _PREFERRED</span>：优先从 slave（replica）节点读取，所有的 slave 都不可用才读取 master</li>\n</ul>\n<h1 id=\"redis分片集群\"><a class=\"anchor\" href=\"#redis分片集群\">#</a> 🎨Redis 分片集群</h1>\n<h2 id=\"分片集群\"><a class=\"anchor\" href=\"#分片集群\">#</a> 🎁分片集群</h2>\n<p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p>\n<ul>\n<li>\n<p>海量数据存储问题</p>\n</li>\n<li>\n<p>高并发写的问题</p>\n</li>\n</ul>\n<p>使用分片集群可以解决上述问题，如图:</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725155747294.png\" alt=\"image-20210725155747294\" /></p>\n<p>分片集群特征：</p>\n<ul>\n<li>\n<p>集群中有多个 master，每个 master 保存不同数据</p>\n</li>\n<li>\n<p>每个 master 都可以有多个 slave 节点</p>\n</li>\n<li>\n<p>master 之间通过 ping 监测彼此健康状态</p>\n</li>\n<li>\n<p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p>\n</li>\n</ul>\n<h2 id=\"散列插槽\"><a class=\"anchor\" href=\"#散列插槽\">#</a> 🎁散列插槽</h2>\n<h3 id=\"插槽原理\"><a class=\"anchor\" href=\"#插槽原理\">#</a> 🎈插槽原理</h3>\n<p>Redis 会把每一个 master 节点映射到 0~16383 共 16384 个插槽（hash slot）上，查看集群信息时就能看到：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725155820320.png\" alt=\"image-20210725155820320\" /></p>\n<p>数据 key 不是与节点绑定，而是与插槽绑定。redis 会根据 key 的有效部分计算插槽值，分两种情况：</p>\n<ul>\n<li>key 中包含 &quot;{}&quot;，且 “{}” 中至少包含 1 个字符，“{}” 中的部分是有效部分</li>\n<li>key 中不包含 “{}”，整个 key 都是有效部分</li>\n</ul>\n<h3 id=\"小结-4\"><a class=\"anchor\" href=\"#小结-4\">#</a> 🎈小结</h3>\n<p>Redis 如何判断某个 key 应该在哪个实例？</p>\n<ul>\n<li>将 16384 个插槽分配到不同的实例</li>\n<li>根据 key 的有效部分计算哈希值，对 16384 取余</li>\n<li>余数作为插槽，寻找插槽所在实例即可</li>\n</ul>\n<p>如何将同一类数据固定的保存在同一个 Redis 实例？</p>\n<ul>\n<li>这一类数据使用相同的有效部分，例如 key 都以 {typeId} 为前缀</li>\n</ul>\n<h2 id=\"集群伸缩\"><a class=\"anchor\" href=\"#集群伸缩\">#</a> 🎁集群伸缩</h2>\n<p><span class=\"red\">redis-cli --cluster</span> 提供了很多操作集群的命令，可以通过下面方式查看：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725160138290.png\" alt=\"image-20210725160138290\" /></p>\n<p>比如，添加节点的命令：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725160448139.png\" alt=\"image-20210725160448139\" /></p>\n<h2 id=\"故障转移\"><a class=\"anchor\" href=\"#故障转移\">#</a> 🎁故障转移</h2>\n<p>集群初识状态是这样的：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210727161152065.png\" alt=\"image-20210727161152065\" /></p>\n<p>其中 7001、7002、7003 都是 master，我们计划让 7002 宕机。</p>\n<h3 id=\"自动故障转移\"><a class=\"anchor\" href=\"#自动故障转移\">#</a> 🎈自动故障转移</h3>\n<p>当集群中有一个 master 宕机会发生什么呢？</p>\n<p>直接停止一个 redis 实例，例如 7002：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">7002</span> <span class=\"token function\">shutdown</span></pre></td></tr></table></figure><p>1）首先是该实例与其它实例失去连接</p>\n<p>2）然后是疑似宕机：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725162319490.png\" alt=\"image-20210725162319490\" /></p>\n<p>3）最后是确定下线，自动提升一个 slave 为新的 master：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725162408979.png\" alt=\"image-20210725162408979\" /></p>\n<p>4）当 7002 再次启动，就会变为一个 slave 节点了：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210727160803386.png\" alt=\"image-20210727160803386\" /></p>\n<h3 id=\"手动故障转移\"><a class=\"anchor\" href=\"#手动故障转移\">#</a> 🎈手动故障转移</h3>\n<p>利用 cluster failover 命令可以手动让集群中的某个 master 宕机，切换到执行 cluster failover 命令的这个 slave 节点，实现无感知的数据迁移。其流程如下：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/image-20210725162441407.png\" alt=\"image-20210725162441407\" /></p>\n<p>这种 failover 命令可以指定三种模式：</p>\n<ul>\n<li><span class=\"red\">缺省</span>：默认的流程，如图 1~6 歩</li>\n<li><span class=\"red\">force</span>：省略了对 offset 的一致性校验</li>\n<li><span class=\"red\">takeover</span>：直接执行第 5 歩，忽略数据一致性、忽略 master 状态和其它 master 的意见</li>\n</ul>\n<h2 id=\"redistemplate访问分片集群\"><a class=\"anchor\" href=\"#redistemplate访问分片集群\">#</a> 🎁RedisTemplate 访问分片集群</h2>\n<p>RedisTemplate 底层同样基于 lettuce 实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p>\n<p>1）引入 redis 的 starter 依赖</p>\n<p>2）配置分片集群地址</p>\n<p>3）配置读写分离</p>\n<p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>application.yaml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">nodes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">7001</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">7002</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">7003</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">8001</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">8002</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">-</span> 192.168.150.101<span class=\"token punctuation\">:</span><span class=\"token number\">8003</span></pre></td></tr></table></figure>",
            "tags": [
                "Backend",
                "Database",
                "Redis"
            ]
        },
        {
            "id": "https://slx-world.top/backend/database/redis/introduction/",
            "url": "https://slx-world.top/backend/database/redis/introduction/",
            "title": "Redis 入门篇",
            "date_published": "2024-10-19T16:00:00.000Z",
            "content_html": "<h1 id=\"️redis-常见命令\"><a class=\"anchor\" href=\"#️redis-常见命令\">#</a> ☎️Redis 常见命令</h1>\n<h2 id=\"redis-数据结构介绍\"><a class=\"anchor\" href=\"#redis-数据结构介绍\">#</a> 📞Redis 数据结构介绍</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652887393157.png\" alt=\"1652887393157\" /></p>\n<div class=\"note info\">\n<p>Redis 为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcw==\">https://redis.io/commands</span> ）可以查看到不同的命令：</p>\n</div>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652887648826.png\" alt=\"1652887648826\" /></p>\n<p>当然我们也可以通过 <span class=\"red\">Help</span> 命令来帮助我们去查看命令</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652887748279.png\" alt=\"1652887748279\" /></p>\n<h2 id=\"redis-通用命令\"><a class=\"anchor\" href=\"#redis-通用命令\">#</a> 📞Redis 通用命令</h2>\n<ul>\n<li><span class=\"red\">KEYS</span>：查看符合模板的所有 key</li>\n<li><span class=\"red\">DEL</span>：删除一个指定的 key</li>\n<li><span class=\"red\">EXISTS</span>：判断 key 是否存在</li>\n<li><span class=\"red\">EXPIRE</span>：给一个 key 设置有效期，有效期到期时该 key 会被自动删除</li>\n<li><span class=\"red\">TTL</span>：查看一个 KEY 的剩余有效期</li>\n</ul>\n<p>通过 <span class=\"red\">help [command]</span> 可以查看一个命令的具体用法，例如：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652887865189.png\" alt=\"1652887865189\" /></p>\n<h2 id=\"redis-命令-string-命令\"><a class=\"anchor\" href=\"#redis-命令-string-命令\">#</a> 📞Redis 命令 —— String 命令</h2>\n<p>String 类型，也就是字符串类型，是 Redis 中最简单的存储类型。</p>\n<p>其 value 是字符串，不过根据字符串的格式不同，又可以分为 3 类：</p>\n<ul>\n<li>string：普通字符串</li>\n<li>int：整数类型，可以做自增。自减操作</li>\n<li>float：浮点类型，可以做自增。自减操作</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652890121291.png\" alt=\"1652890121291\" /></p>\n<p>String 的常见命令有：</p>\n<ul>\n<li><span class=\"red\">SET</span>：添加或者修改已经存在的一个 String 类型的键值对</li>\n<li><span class=\"red\">GET</span>：根据 key 获取 String 类型的 value</li>\n<li><span class=\"red\">MSET</span>：批量添加多个 String 类型的键值对</li>\n<li><span class=\"red\">MGET</span>：根据多个 key 获取多个 String 类型的 value</li>\n<li><span class=\"red\">INCR</span>：让一个整型的 key 自增 1</li>\n<li><span class=\"red\">INCRBY</span>: 让一个整型的 key 自增并指定步长，例如：incrby num 2 让 num 值自增 2</li>\n<li><span class=\"red\">INCRBYFLOAT</span>：让一个浮点类型的数字自增并指定步长</li>\n<li><span class=\"red\">SETNX</span>：添加一个 String 类型的键值对，前提是这个 key 不存在，否则不执行</li>\n<li><span class=\"red\">SETEX</span>：添加一个 String 类型的键值对，并且指定有效期</li>\n</ul>\n<div class=\"note warning\">\n<p>SET 和 GET: 如果 key 不存在则是新增，如果存在则是修改</p>\n</div>\n<h2 id=\"redis-命令-key-的层级结构\"><a class=\"anchor\" href=\"#redis-命令-key-的层级结构\">#</a> 📞Redis 命令 —— Key 的层级结构</h2>\n<p>Redis 的 key 允许有多个单词形成层级结构，多个单词之间用 ':' 隔开，格式如下：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652941631682.png\" alt=\"1652941631682\" /></p>\n<p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p>\n<h2 id=\"redis-命令-hash-命令\"><a class=\"anchor\" href=\"#redis-命令-hash-命令\">#</a> 📞Redis 命令 —— Hash 命令</h2>\n<p>Hash 类型，也叫散列，其 value 是一个无序字典，类似于 Java 中的 HashMap 结构。</p>\n<p>String 结构是将对象序列化为 JSON 字符串后存储，当需要修改对象某个字段时很不方便：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652941995945.png\" alt=\"1652941995945\" /></p>\n<p>Hash 结构可以将对象中的每个字段独立存储，可以针对单个字段做 CRUD：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652942027719.png\" alt=\"1652942027719\" /></p>\n<p><strong>Hash 类型的常见命令</strong></p>\n<ul>\n<li>\n<p><span class=\"red\">HSET key field value</span>：添加或者修改 hash 类型 key 的 field 的值</p>\n</li>\n<li>\n<p><span class=\"red\">HGET key field</span>：获取一个 hash 类型 key 的 field 的值</p>\n</li>\n<li>\n<p><span class=\"red\">HMSET</span>：批量添加多个 hash 类型 key 的 field 的值</p>\n</li>\n<li>\n<p><span class=\"red\">HMGET</span>：批量获取多个 hash 类型 key 的 field 的值</p>\n</li>\n<li>\n<p><span class=\"red\">HGETALL</span>：获取一个 hash 类型的 key 中的所有的 field 和 value</p>\n</li>\n<li>\n<p><span class=\"red\">HKEYS</span>：获取一个 hash 类型的 key 中的所有的 field</p>\n</li>\n<li>\n<p><span class=\"red\">HINCRBY</span>: 让一个 hash 类型 key 的字段值自增并指定步长</p>\n</li>\n<li>\n<p><span class=\"red\">HSETNX</span>：添加一个 hash 类型的 key 的 field 值，前提是这个 field 不存在，否则不执行</p>\n</li>\n</ul>\n<h2 id=\"redis-命令-list-命令\"><a class=\"anchor\" href=\"#redis-命令-list-命令\">#</a> 📞Redis 命令 —— List 命令</h2>\n<p>Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p>\n<p>特征也与 LinkedList 类似：</p>\n<ul>\n<li>有序</li>\n<li>元素可以重复</li>\n<li>插入和删除快</li>\n<li>查询速度一般</li>\n</ul>\n<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>\n<p><strong>List 的常见命令有：</strong></p>\n<ul>\n<li><span class=\"red\">LPUSH key element ...</span> ：向列表左侧插入一个或多个元素</li>\n<li><span class=\"red\">LPOP key</span>：移除并返回列表左侧的第一个元素，没有则返回 nil</li>\n<li><span class=\"red\">RPUSH key element ... </span>：向列表右侧插入一个或多个元素</li>\n<li><span class=\"red\">RPOP key</span>：移除并返回列表右侧的第一个元素</li>\n<li><span class=\"red\">LRANGE key star end</span>：返回一段角标范围内的所有元素</li>\n<li><span class=\"red\">BLPOP 和 BRPOP</span>：与 LPOP 和 RPOP 类似，只不过在没有元素时等待指定时间，而不是直接返回 nil</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652943604992.png\" alt=\"1652943604992\" /></p>\n<h2 id=\"redis-命令-set-命令\"><a class=\"anchor\" href=\"#redis-命令-set-命令\">#</a> 📞Redis 命令 —— Set 命令</h2>\n<p>Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 value 为 null 的 HashMap。因为也是一个 hash 表，因此具备与 HashSet 类似的特征：</p>\n<ul>\n<li>无序</li>\n<li>元素不可重复</li>\n<li>查找快</li>\n<li>支持交集。并集。差集等功能</li>\n</ul>\n<p><strong>Set 类型的常见命令</strong></p>\n<ul>\n<li><span class=\"red\">SADD key member ... </span>：向 set 中添加一个或多个元素</li>\n<li><span class=\"red\">SREM key member ... </span>: 移除 set 中的指定元素</li>\n<li><span class=\"red\">SCARD key</span>： 返回 set 中元素的个数</li>\n<li><span class=\"red\">SISMEMBER key member</span>：判断一个元素是否存在于 set 中</li>\n<li><span class=\"red\">SMEMBERS</span>：获取 set 中的所有元素</li>\n<li><span class=\"red\">SINTER key1 key2 ... </span>：求 key1 与 key2 的交集</li>\n<li><span class=\"red\">SDIFF key1 key2 ... </span>：求 key1 与 key2 的差集</li>\n<li><span class=\"red\">SUNION key1 key2 ..</span>：求 key1 和 key2 的并集</li>\n</ul>\n<h2 id=\"redis-命令-sortedset-类型\"><a class=\"anchor\" href=\"#redis-命令-sortedset-类型\">#</a> 📞Redis 命令 —— SortedSet 类型</h2>\n<p>Redis 的 SortedSet 是一个可排序的 set 集合，与 Java 中的 TreeSet 有些类似，但底层数据结构却差别很大。SortedSet 中的每一个元素都带有一个 <span class=\"red\">score</span> 属性，可以基于 score 属性对元素排序，底层的实现是一个<span class=\"red\">跳表（SkipList）</span>加  <span class=\"red\">hash</span> 表。</p>\n<p>SortedSet 具备下列特性：</p>\n<ul>\n<li>可排序</li>\n<li>元素不重复</li>\n<li>查询速度快</li>\n</ul>\n<p>因为 SortedSet 的可排序特性，经常被用来实现排行榜这样的功能。</p>\n<p><strong>SortedSet 的常见命令有：</strong></p>\n<ul>\n<li><span class=\"red\">ZADD key score member</span>：添加一个或多个元素到 sorted set ，如果已经存在则更新其 score 值</li>\n<li><span class=\"red\">ZREM key member</span>：删除 sorted set 中的一个指定元素</li>\n<li><span class=\"red\">ZSCORE key member </span>: 获取 sorted set 中的指定元素的 score 值</li>\n<li><span class=\"red\">ZRANK key member</span>：获取 sorted set 中的指定元素的排名</li>\n<li><span class=\"red\">ZCARD key</span>：获取 sorted set 中的元素个数</li>\n<li><span class=\"red\">ZCOUNT key min max</span>：统计 score 值在给定范围内的所有元素的个数</li>\n<li><span class=\"red\">ZINCRBY key increment member</span>：让 sorted set 中的指定元素自增，步长为指定的 increment 值</li>\n<li><span class=\"red\">ZRANGE key min max</span>：按照 score 排序后，获取指定排名范围内的元素</li>\n<li><span class=\"red\">ZRANGEBYSCORE key min max</span>：按照 score 排序后，获取指定 score 范围内的元素</li>\n<li><span class=\"red\">ZDIFF.ZINTER.ZUNION</span>：求差集。交集。并集</li>\n</ul>\n<div class=\"note info\">\n<p>所有的排名默认都是升序，如果要降序则在命令的 Z 后面添加 REV 即可，例如：</p>\n<ul>\n<li><strong>升序</strong>获取 sorted set 中的指定元素的排名：ZRANK key member</li>\n<li><strong>降序</strong>获取 sorted set 中的指定元素的排名：ZREVRANK key memeber</li>\n</ul>\n</div>\n<h1 id=\"️redis-的-java-客户端-springdataredis\"><a class=\"anchor\" href=\"#️redis-的-java-客户端-springdataredis\">#</a> ☎️Redis 的 Java 客户端 —— SpringDataRedis</h1>\n<p>SpringData 是 Spring 中数据操作的模块，包含对各种数据库的集成，其中对 Redis 的集成模块就叫做 SpringDataRedis，官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtcmVkaXM=\">https://spring.io/projects/spring-data-redis</span></p>\n<ul>\n<li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li>\n<li>提供了 RedisTemplate 统一 API 来操作 Redis</li>\n<li>支持 Redis 的发布订阅模型</li>\n<li>支持 Redis 哨兵和 Redis 集群</li>\n<li>支持基于 Lettuce 的响应式编程</li>\n<li>支持基于 JDK.JSON. 字符串.Spring 对象的数据序列化及反序列化</li>\n<li>支持基于 Redis 的 JDKCollection 实现</li>\n</ul>\n<p>SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作 API 封装到了不同的类型中：</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/backend/database/redis/1652976773295.png\" alt=\"1652976773295\" /></p>\n<div class=\"note info\">\n<p>SpringDataRedis 的使用步骤：</p>\n<ul>\n<li>引入 spring-boot-starter-data-redis 依赖</li>\n<li>在 application.yml 配置 Redis 信息</li>\n<li>注入 RedisTemplate</li>\n</ul>\n</div>\n<h2 id=\"redis-数据序列化\"><a class=\"anchor\" href=\"#redis-数据序列化\">#</a> 📞Redis 数据序列化</h2>\n<p>RedisTemplate 的两种序列化实践方案：</p>\n<ol>\n<li>\n<p>方案一：</p>\n<ul>\n<li>自定义 RedisTemplate</li>\n<li>修改 RedisTemplate 的序列化器为 GenericJackson2JsonRedisSerializer</li>\n</ul>\n</li>\n<li>\n<p>方案二：</p>\n<ul>\n<li>使用 StringRedisTemplate</li>\n<li>写入 Redis 时，手动把对象序列化为 JSON</li>\n<li>读取 Redis 时，手动把读取到的 JSON 反序列化为对象</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Backend",
                "Database",
                "Redis"
            ]
        },
        {
            "id": "https://slx-world.top/test/test-basis/day05/",
            "url": "https://slx-world.top/test/test-basis/day05/",
            "title": "测试基础 Day05",
            "date_published": "2024-10-13T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "Test",
                "Test-Basis"
            ]
        },
        {
            "id": "https://slx-world.top/test/test-basis/day04/",
            "url": "https://slx-world.top/test/test-basis/day04/",
            "title": "测试基础 Day04",
            "date_published": "2024-10-12T16:00:00.000Z",
            "content_html": "<h1 id=\"html-介绍\"><a class=\"anchor\" href=\"#html-介绍\">#</a> 🌺HTML 介绍</h1>\n<p>Web 前端三大核心技术</p>\n<ul>\n<li><span class=\"rainbow\">HTML</span>：负责网页的架构</li>\n<li><span class=\"rainbow\">CSS</span>：负责网页的样式、美化</li>\n<li><span class=\"rainbow\">JS</span>：负责网页的行为</li>\n</ul>\n<p>什么是 HTML</p>\n<ul>\n<li>HTML 是用来描述网页的一种语言</li>\n</ul>\n<p>HTML 标签</p>\n<ul>\n<li>\n<p><span class=\"rainbow\">单标签</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>单标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><span class=\"rainbow\">双标签</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>双标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span> 内容 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<p>标签属性</p>\n<ul>\n<li>\n<p>属性格式：属性名 = &quot;属性值&quot;</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>标签属性</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.jd.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 京东 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"html-常用标签\"><a class=\"anchor\" href=\"#html-常用标签\">#</a> 🌺HTML 常用标签</h1>\n<h2 id=\"标题标签\"><a class=\"anchor\" href=\"#标题标签\">#</a> 🌱标题标签</h2>\n<p>HTML 标题是通过 <span class=\"red\">&lt;h1&gt; - &lt;h6&gt;</span> 等标签进行定义</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>标题标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span> 一号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span> 二号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span> 三号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span> 四号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span> 五号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span> 六号标题 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"段落标签\"><a class=\"anchor\" href=\"#段落标签\">#</a> 🌱段落标签</h2>\n<p>HTML 段落是通过 <span class=\"red\">&lt;p&gt;</span> 标签进行定义的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>段落标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 段落 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 段落 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"超链接标签\"><a class=\"anchor\" href=\"#超链接标签\">#</a> 🌱超链接标签</h2>\n<p>超链接是通过 <span class=\"red\">&lt;a&gt;</span> 标签进行定义的</p>\n<p>属性</p>\n<ul>\n<li><span class=\"rainbow\">href</span>：跳转地址</li>\n<li><span class=\"rainbow\">target</span>：新窗口打开</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>超链接标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.baidu.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 百度 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"图片标签\"><a class=\"anchor\" href=\"#图片标签\">#</a> 🌱图片标签</h2>\n<p>HTML 图片是通过 <span class=\"red\">&lt;img&gt;</span> 标签进行定义的</p>\n<p>属性</p>\n<ul>\n<li><span class=\"rainbow\">src</span>：图片路径</li>\n<li><span class=\"rainbow\">title</span>：光标悬停显示文字</li>\n<li><span class=\"rainbow\">alt</span>：图片未加载时显示文字</li>\n<li><span class=\"rainbow\">width</span>：图片宽度</li>\n<li><span class=\"rainbow\">height</span>：图片高度</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>图片标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"换行和空格\"><a class=\"anchor\" href=\"#换行和空格\">#</a> 🌱换行和空格</h2>\n<p>换行：<span class=\"red\">&lt;br/&gt;</span></p>\n<p>空格：<span class=\"red\">&amp;nbsp;</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>换行和空格</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 1、换行 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    换行 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span> 换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 2、空格 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    空格 <span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span> 空格</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"布局标签\"><a class=\"anchor\" href=\"#布局标签\">#</a> 🌱布局标签</h2>\n<p>页面布局常用 <span class=\"red\">&lt;div&gt; &lt;/div&gt;</span> 和 <span class=\"red\">&lt;span&gt; &lt;/span&gt;</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>布局标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 1、大盒子 —— div 布局 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        大盒子</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 2、小盒子 —— span 布局 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 小盒子 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 小盒子 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"列表标签\"><a class=\"anchor\" href=\"#列表标签\">#</a> 🌱列表标签</h2>\n<p>列表标签常用 <span class=\"red\">li</span> 元素（分为：<span class=\"yellow\">有序</span>和<span class=\"yellow\">无序</span>）</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>列表标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 1、有序列表 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> 有序列表 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> 有序列表 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 2、无序列表 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> 无序列表 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> 无序列表 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"表单标签\"><a class=\"anchor\" href=\"#表单标签\">#</a> 🌱表单标签</h2>\n<p>页面提交输入信息需要使用表单标签 <span class=\"red\">&lt;form&gt;</span></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>表单标签</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        文本框 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        密码框 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">&lt;!-- name 的值相同为一组，一组内只能选择 1 个 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        单选按钮 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>相同<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        复选框 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 按钮 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        1、普通按钮 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        2、重置按钮 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        3、提交按钮 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "Test",
                "Test-Basis"
            ]
        },
        {
            "id": "https://slx-world.top/backend/ssm/spring/day03/",
            "url": "https://slx-world.top/backend/ssm/spring/day03/",
            "title": "Spring_day03",
            "date_published": "2024-10-12T16:00:00.000Z",
            "content_html": "<h1 id=\"aop-核心概念\"><a class=\"anchor\" href=\"#aop-核心概念\">#</a> AOP 核心概念</h1>\n<ul>\n<li>\n<p>连接点（JoinPoint）：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等</p>\n<ul>\n<li>在 SpringAOP 中，理解为方法的执行</li>\n</ul>\n</li>\n<li>\n<p>切入点（Pointcut）：匹配连接点的式子</p>\n<ul>\n<li>在 SpringAOP 中，一个切入点可以描述一个具体方法，也可也匹配多个方法\n<ul>\n<li>一个具体的方法：如 com.itheima.dao 包下的 BookDao 接口中的无形参无返回值的 save 方法</li>\n<li>匹配多个方法：所有的 save 方法，所有的 get 开头的方法，所有以 Dao 结尾的接口中的任意方法，所有带有一个参数的方法</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</p>\n</div>\n</li>\n<li>\n<p>通知（Advice）：在切入点处执行的操作，也就是共性功能</p>\n<ul>\n<li>在 SpringAOP 中，功能最终以方法的形式呈现</li>\n</ul>\n</li>\n<li>\n<p>通知类：定义通知的类</p>\n</li>\n<li>\n<p>切面（Aspect）：描述通知与切入点的对应关系</p>\n</li>\n</ul>\n<h1 id=\"知识点1enableaspectjautoproxy\"><a class=\"anchor\" href=\"#知识点1enableaspectjautoproxy\">#</a> 知识点 1：@EnableAspectJAutoProxy</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@EnableAspectJAutoProxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>配置类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>配置类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>开启注解格式 AOP 功能</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"知识点2aspect\"><a class=\"anchor\" href=\"#知识点2aspect\">#</a> 知识点 2：@Aspect</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Aspect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>切面类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前类为 AOP 切面类</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"知识点3pointcut\"><a class=\"anchor\" href=\"#知识点3pointcut\">#</a> 知识点 3：@Pointcut</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Pointcut</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>切入点方法定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置切入点方法</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：切入点表达式</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"知识点4before\"><a class=\"anchor\" href=\"#知识点4before\">#</a> 知识点 4：@Before</h1>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Before</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>通知方法定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"aop-工作流程\"><a class=\"anchor\" href=\"#aop-工作流程\">#</a> AOP 工作流程</h1>\n<ol>\n<li>Spring 容器启动</li>\n<li>读取所有切面配置中的切入点</li>\n<li>初始化 bean</li>\n<li>获取 bean，执行方法</li>\n</ol>\n<hr />\n<ul>\n<li>目标对象 (Target)：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li>\n<li>代理 (Proxy)：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li>\n</ul>\n<p>目标对象就是要增强的类对应的对象，也叫原始对象，不能说它不能运行，只能说它在运行的过程中对于要增强的内容是缺失的。</p>\n<p>SpringAOP 是在不改变原有设计（代码）的前提下对其进行增强的，它的底层采用的是代理模式实现的，所以要对原始对象进行增强，就需要对原始对象创建代理对象，在代理对象中的方法把通知内容加进去，就实现了增强，这就是我们所说的代理（Proxy）。</p>\n<h1 id=\"aop-切入点表达式\"><a class=\"anchor\" href=\"#aop-切入点表达式\">#</a> AOP 切入点表达式</h1>\n<h2 id=\"语法格式\"><a class=\"anchor\" href=\"#语法格式\">#</a> 语法格式</h2>\n<ul>\n<li>切入点：要进行增强的方法</li>\n<li>切入点表达式：要进行增强的方法的描述方式</li>\n</ul>\n<p>切入点表达式标准格式</p>\n<ul>\n<li>动作关键字 (访问修饰符 返回值 包名。类 / 接口名。方法名 (参数) 异常名）</li>\n</ul>\n",
            "tags": [
                "Backend",
                "Framework",
                "Spring"
            ]
        },
        {
            "id": "https://slx-world.top/bigdata/zk/zk-notes/",
            "url": "https://slx-world.top/bigdata/zk/zk-notes/",
            "title": "Zookeeper 笔记",
            "date_published": "2024-10-11T16:00:00.000Z",
            "content_html": "<h1 id=\"zookeeper-数据模型\"><a class=\"anchor\" href=\"#zookeeper-数据模型\">#</a> 🌨Zookeeper 数据模型</h1>\n<p>ZooKeeper 是一个树形目录服务，其数据模型和 Unix 的文件系统目录树很类似，拥有一个层次化结构。</p>\n<p>这里面的每一个节点都被称为： ZNode，每个节点上都会保存自己的数据和节点信息。</p>\n<p>节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下。</p>\n<p>节点可以分为四大类：</p>\n<ul>\n<li><span class=\"yellow\">PERSISTENT</span> 持久化节点</li>\n<li><span class=\"yellow\">EPHEMERAL</span> 临时节点 ：<span class=\"red\">-e</span></li>\n<li><span class=\"yellow\">PERSISTENT_SEQUENTIAL</span> 持久化顺序节点 ：<span class=\"red\">-s</span></li>\n<li><span class=\"yellow\">EPHEMERAL_SEQUENTIAL</span> 临时顺序节点  ：<span class=\"red\">-es</span></li>\n</ul>\n<h1 id=\"zookeeper-常用命令\"><a class=\"anchor\" href=\"#zookeeper-常用命令\">#</a> 🌨Zookeeper 常用命令</h1>\n<h2 id=\"️服务端常用命令\"><a class=\"anchor\" href=\"#️服务端常用命令\">#</a> ☃️服务端常用命令</h2>\n<p>启动 ZooKeeper 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh start</pre></td></tr></table></figure><p>查看 ZooKeeper 服务状态</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh status</pre></td></tr></table></figure><p>停止 ZooKeeper 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh stop</pre></td></tr></table></figure><p>重启 ZooKeeper 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh restart</pre></td></tr></table></figure><h2 id=\"️客户端常用命令\"><a class=\"anchor\" href=\"#️客户端常用命令\">#</a> ☃️客户端常用命令</h2>\n<p>连接 ZooKeeper 服务端</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkCli.sh –server ip:port</pre></td></tr></table></figure><p>断开连接</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>quit</pre></td></tr></table></figure><p>查看命令帮助</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">help</span></pre></td></tr></table></figure><p>显示指定目录下节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> 目录</pre></td></tr></table></figure><p>创建节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create /节点path value</pre></td></tr></table></figure><p>获取节点值</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get /节点path</pre></td></tr></table></figure><p>设置节点值</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> /节点path value</pre></td></tr></table></figure><p>删除单个节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>delete /节点path</pre></td></tr></table></figure><p>删除带有子节点的节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deleteall /节点path</pre></td></tr></table></figure><p>创建临时节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create <span class=\"token parameter variable\">-e</span> /节点path value</pre></td></tr></table></figure><p>创建顺序节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create <span class=\"token parameter variable\">-s</span> /节点path value</pre></td></tr></table></figure><p>查询节点详细信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Zookeeper 服务端常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> –s /节点path</pre></td></tr></table></figure><p>czxid：节点被创建的事务 ID ctime: 创建时间 mzxid: 最后一次被更新的事务 ID mtime: 修改时间 pzxid：子节点列表最后一次被更新的事务 IDcversion：子节点的版本号</p>\n<p>dataversion：数据版本号 aclversion：权限版本号 ephemeralOwner：用于临时节点，代表临时节点的事务 ID，如果为持久节点则为 0 dataLength：节点存储的数据的长度 numChildren：当前节点的子节点个数</p>\n<h1 id=\"curator-api-常用操作\"><a class=\"anchor\" href=\"#curator-api-常用操作\">#</a> 🌨Curator API 常用操作</h1>\n<p>建立连接</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>添加节点</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>删除节点</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>修改节点</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>查询节点</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>Watch 事件监听</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<p>分布式锁实现</p>\n<pre><code class=\"language-java\">\n</code></pre>\n<h1 id=\"zookeeper-分布式锁原理\"><a class=\"anchor\" href=\"#zookeeper-分布式锁原理\">#</a> 🌨ZooKeeper 分布式锁原理</h1>\n<p>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。</p>\n<ol>\n<li>客户端获取锁时，在 lock 节点下创建临时顺序节点。</li>\n<li>然后获取 lock 下面的所有子节点，客户端获取到所有的子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。</li>\n<li>如果发现自己创建的节点并非 lock 所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件。</li>\n<li>如果发现比自己小的那个节点被删除，则客户端的 Watcher 会收到相应通知，此时再次判断自己创建的节点    是否是 lock 子节点中序号最小的，如果是则获取到了锁，    如果不是则重复以上步骤继续获取到比自己小的一个节点    并注册监听。</li>\n</ol>\n<h1 id=\"curator-分布式锁-api\"><a class=\"anchor\" href=\"#curator-分布式锁-api\">#</a> 🌨Curator 分布式锁 API</h1>\n<p>在 Curator 中有五种锁方案：</p>\n<ul>\n<li><span class=\"yellow\">InterProcessSemaphoreMutex</span>：分布式排它锁（非可重入锁）</li>\n<li><span class=\"yellow\">InterProcessMutex</span>：分布式可重入排它锁</li>\n<li><span class=\"yellow\">InterProcessReadWriteLock</span>：分布式读写锁</li>\n<li><span class=\"yellow\">InterProcessMultiLock</span>：将多个锁作为单个实体管理的容器</li>\n<li><span class=\"yellow\">InterProcessSemaphoreV2</span>：共享信号量</li>\n</ul>\n",
            "tags": [
                "BigData",
                "Zookeeper"
            ]
        },
        {
            "id": "https://slx-world.top/test/test-basis/day03/",
            "url": "https://slx-world.top/test/test-basis/day03/",
            "title": "测试基础 Day03",
            "date_published": "2024-10-11T16:00:00.000Z",
            "content_html": "<h1 id=\"缺陷介绍\"><a class=\"anchor\" href=\"#缺陷介绍\">#</a> 🌺缺陷介绍</h1>\n<h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 🌱定义</h2>\n<p>软件在使用过程中存在的任何<span class=\"yellow\">问题</span>都叫软件的缺陷，简称 bug。</p>\n<h2 id=\"判断标准\"><a class=\"anchor\" href=\"#判断标准\">#</a> 🌱判断标准</h2>\n<ul>\n<li>软件未实现需求（规格）说明书中明确要求的功能 —— <span class=\"rainbow\">少功能</span></li>\n<li>软件出现了需求（规格）说明书中指明不应该出现的错误 —— <span class=\"rainbow\">功能错误</span></li>\n<li>软件实现的功能超出需求（规格）说明书指明的范围 —— <span class=\"rainbow\">多功能</span></li>\n<li>软件未实现需求（规格）说明书中虽未明确指明但应该实现的要求 —— <span class=\"rainbow\">隐性功能错误</span></li>\n<li>软件难于理解，不易使用，运行缓慢，用户体验不好 —— <span class=\"rainbow\">不易使用</span></li>\n</ul>\n<h2 id=\"产生原因\"><a class=\"anchor\" href=\"#产生原因\">#</a> 🌱产生原因</h2>\n<ul>\n<li><span class=\"rainbow\">需求阶段</span>：需求描述不易理解，有歧义、错误等</li>\n<li><span class=\"rainbow\">设计阶段</span>：设计文档存在错误或者缺陷</li>\n<li><span class=\"rainbow\">编码阶段</span>：代码出现错误</li>\n<li><span class=\"rainbow\">运行阶段</span>：软硬件系统本身故障导致软件缺陷</li>\n</ul>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 🌱生命周期</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020000426164.png\" alt=\"image-20241020000426164\" /></p>\n<h2 id=\"核心内容\"><a class=\"anchor\" href=\"#核心内容\">#</a> 🌱核心内容</h2>\n<ul>\n<li><span class=\"rainbow\">缺陷的标题</span>：描述缺陷的核心问题</li>\n<li><span class=\"rainbow\">缺陷的预置条件</span>：缺陷产生的前提</li>\n<li><span class=\"rainbow\">缺陷的复选步骤</span>：复选缺陷的过程</li>\n<li><span class=\"rainbow\">缺陷的预期结果</span>：希望得到的结果</li>\n<li><span class=\"rainbow\">缺陷的实际结果</span>：实际得到的结果</li>\n<li><span class=\"rainbow\">缺陷的必要附件</span>：图片、日志等信息（证据）</li>\n</ul>\n<h2 id=\"提交要素\"><a class=\"anchor\" href=\"#提交要素\">#</a> 🌱提交要素</h2>\n<ul>\n<li><span class=\"rainbow\">缺陷报告编号</span></li>\n<li><span class=\"rainbow\">严重程度</span></li>\n<li><span class=\"rainbow\">缺陷优先级</span></li>\n<li><span class=\"rainbow\">Bug 类型</span></li>\n<li><span class=\"rainbow\">缺陷状态</span></li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020001117816.png\" alt=\"image-20241020001117816\" /></p>\n<h2 id=\"缺陷类型\"><a class=\"anchor\" href=\"#缺陷类型\">#</a> 🌱缺陷类型</h2>\n<ul>\n<li><span class=\"rainbow\">功能错误</span></li>\n<li><span class=\"rainbow\">界面（UI）错误</span></li>\n<li><span class=\"rainbow\">兼容性</span></li>\n<li><span class=\"rainbow\">数据</span></li>\n<li><span class=\"rainbow\">易用性</span></li>\n<li><span class=\"rainbow\">改进建议</span></li>\n<li><span class=\"rainbow\">架构</span></li>\n</ul>\n<h1 id=\"缺陷编写\"><a class=\"anchor\" href=\"#缺陷编写\">#</a> 🌺缺陷编写</h1>\n<h2 id=\"报告示例\"><a class=\"anchor\" href=\"#报告示例\">#</a> 🌱报告示例</h2>\n<table>\n<thead>\n<tr>\n<th><span class=\"rainbow\">缺陷 ID</span></th>\n<th><span class=\"rainbow\">缺陷标题</span></th>\n<th><span class=\"rainbow\">缺陷状态</span></th>\n<th><span class=\"rainbow\">严重程度</span></th>\n<th><span class=\"rainbow\">优先级</span></th>\n<th><span class=\"rainbow\">所属模块</span></th>\n<th><span class=\"rainbow\">缺陷描述</span></th>\n<th><span class=\"rainbow\">附件</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"跟踪流程\"><a class=\"anchor\" href=\"#跟踪流程\">#</a> 🌱跟踪流程</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020001848778.png\" alt=\"image-20241020001848778\" /></p>\n<h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 🌱注意事项</h2>\n<ul>\n<li><span class=\"rainbow\">可重现</span>：缺陷可以复现</li>\n<li><span class=\"rainbow\">规范性</span>：符合公司或者项目要求</li>\n<li><span class=\"rainbow\">唯一性</span>：一个缺陷上报一个问题</li>\n</ul>\n<h2 id=\"编写规范\"><a class=\"anchor\" href=\"#编写规范\">#</a> 🌱编写规范</h2>\n<ul>\n<li><span class=\"rainbow\">准确</span>：描述的信息是正确的</li>\n<li><span class=\"rainbow\">具体</span>：有细节且是真实特定的</li>\n<li><span class=\"rainbow\">简洁易懂</span>：描述简单容易理解</li>\n<li><span class=\"rainbow\">次序清晰</span>：描述缺陷过程有条件，有先后顺序</li>\n</ul>\n<h1 id=\"管理工具\"><a class=\"anchor\" href=\"#管理工具\">#</a> 🌺管理工具</h1>\n<h2 id=\"禅道介绍\"><a class=\"anchor\" href=\"#禅道介绍\">#</a> 🌱禅道介绍</h2>\n<p>地址：<ins class=\"info\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZW1vLnplbnRhby5uZXQvdXNlci1sb2dpbi5odG1s\">https://demo.zentao.net/user-login.html</span></ins></p>\n<h2 id=\"禅道特点\"><a class=\"anchor\" href=\"#禅道特点\">#</a> 🌱禅道特点</h2>\n<ul>\n<li>国产、免费、开源、简单、轻量级</li>\n<li>三管融合（产品管理、项目管理、质量管理）</li>\n<li>三权分立\n<ol>\n<li>产品部门 -—— 构想者</li>\n<li>研发部门 —— 执行者</li>\n<li>测试部门 —— 保证者</li>\n</ol>\n</li>\n<li>四角协同\n<ol>\n<li>产品经理</li>\n<li>项目经理</li>\n<li>研发团队</li>\n<li>测试团队</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"使用流程\"><a class=\"anchor\" href=\"#使用流程\">#</a> 🌱使用流程</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020072959229.png\" alt=\"image-20241020072959229\" /></p>\n",
            "tags": [
                "Test",
                "Test-Basis"
            ]
        },
        {
            "id": "https://slx-world.top/backend/ssm/spring/day02/",
            "url": "https://slx-world.top/backend/ssm/spring/day02/",
            "title": "Spring_day02",
            "date_published": "2024-10-11T16:00:00.000Z",
            "content_html": "<h1 id=\"加载-properties-文件\"><a class=\"anchor\" href=\"#加载-properties-文件\">#</a> 加载 properties 文件</h1>\n<p>当有多个 properties 配置文件需要被加载，该如何配置？</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            http://www.springframework.org/schema/beans/spring-beans.xsd</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            http://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式一 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties,jdbc2.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式二 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式三 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 方式四 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath*:*.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>方式一：可以实现，如果配置文件多的话，每个都需要配置</li>\n<li>方式二： <code>*.properties</code>  代表所有以 properties 结尾的文件都会被加载，可以解决方式一的问题，但是不标准</li>\n<li>方式三：标准的写法， <code>classpath:</code>  代表的是从根路径下开始查找，但是只能查询当前项目的根路径</li>\n<li>方式四：不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的 properties 配置文件</li>\n</ul>\n<p>如何开启 context 的命名空间？</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629980280952.png\" alt=\"1629980280952\" /></p>\n<p>如何加载 properties 配置文件？</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">system-properties-mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NEVER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>如何在 applicationContext.xml 引入 properties 配置文件中的值？</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$&#123;key&#125;</pre></td></tr></table></figure><h1 id=\"核心容器\"><a class=\"anchor\" href=\"#核心容器\">#</a> 核心容器</h1>\n<h2 id=\"创建方式\"><a class=\"anchor\" href=\"#创建方式\">#</a> 创建方式</h2>\n<ul>\n<li>\n<p>类路径下的 XML 配置文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>文件系统下的 XML 配置文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"bean-获取方式\"><a class=\"anchor\" href=\"#bean-获取方式\">#</a> bean 获取方式</h2>\n<ul>\n<li>\n<p>方式一：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方式二：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookDao\"</span>，<span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方式三：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BookDao</span> bookDao <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"容器类层次结构\"><a class=\"anchor\" href=\"#容器类层次结构\">#</a> 容器类层次结构</h2>\n<p>（1）在 IDEA 中双击 <code>shift</code> , 输入 BeanFactory</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629985148294.png\" alt=\"1629985148294\" /></p>\n<p>（2）点击进入 BeanFactory 类， <code>Ctrl+h</code> ，就能查看到如下结构的层次关系</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629984980781.png\" alt=\"1629984980781\" /></p>\n<ul>\n<li>\n<p>BeanFactory 是<span class=\"yellow\">延迟加载</span>，只有在获取 bean 对象的时候才会去创建</p>\n</li>\n<li>\n<p>ApplicationContext 是<span class=\"yellow\">立即加载</span>，容器加载的时候就会创建 bean 对象</p>\n</li>\n<li>\n<p>ApplicationContext 要想成为延迟加载，只需要按照如下方式进行配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.itheima.dao.impl.BookDaoImpl<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">lazy-init</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"bean-相关\"><a class=\"anchor\" href=\"#bean-相关\">#</a> bean 相关</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629986510487.png\" alt=\"1629986510487\" /></p>\n<h2 id=\"依赖注入相关\"><a class=\"anchor\" href=\"#依赖注入相关\">#</a> 依赖注入相关</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629986848563.png\" alt=\"1629986848563\" /></p>\n<h1 id=\"注解开发\"><a class=\"anchor\" href=\"#注解开发\">#</a> 注解开发</h1>\n<h2 id=\"定义-bean\"><a class=\"anchor\" href=\"#定义-bean\">#</a> 定义 bean</h2>\n<p>XML 与注解配置的对应关系:</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629990315619.png\" alt=\"1629990315619\" /></p>\n<div class=\"note info\">\n<p>@Component 注解不可以添加在接口上，因为接口是无法创建对象的。</p>\n</div>\n<h4 id=\"知识点1component等\"><a class=\"anchor\" href=\"#知识点1component等\">#</a> 知识点 1:@Component 等</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Component/@Controller/@Service/@Repository</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置该类为 spring 管理的 bean</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：定义 bean 的 id</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<ul>\n<li>记住 @Component、@Controller、@Service、@Repository 这四个注解</li>\n<li>applicationContext.xml 中 <code>&lt;context:component-san/&gt;</code>  的作用是指定扫描包路径，注解为 @ComponentScan</li>\n<li>@Configuration 标识该类为配置类，使用类替换 applicationContext.xml 文件</li>\n<li>ClassPathXmlApplicationContext 是加载 XML 配置文件</li>\n<li>AnnotationConfigApplicationContext 是加载配置类</li>\n</ul>\n<h5 id=\"知识点1postconstruct\"><a class=\"anchor\" href=\"#知识点1postconstruct\">#</a> 知识点 1：@PostConstruct</h5>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@PostConstruct</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>方法上</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置该方法为初始化方法</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"知识点2predestroy\"><a class=\"anchor\" href=\"#知识点2predestroy\">#</a> 知识点 2：@PreDestroy</h5>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@PreDestroy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>方法上</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置该方法为销毁方法</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1630033039358.png\" alt=\"1630033039358\" /></p>\n<h4 id=\"知识点1autowired\"><a class=\"anchor\" href=\"#知识点1autowired\">#</a> 知识点 1：@Autowired</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Autowired</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>属性注解  或  方法注解（了解）  或  方法形参注解（了解）</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>属性定义上方  或  标准 set 方法上方  或  类 set 方法上方  或  方法形参前面</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>为引用类型属性设置值</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>required：true/false，定义该属性是否允许为 null</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"知识点2qualifier\"><a class=\"anchor\" href=\"#知识点2qualifier\">#</a> 知识点 2：@Qualifier</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Qualifier</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>属性注解  或  方法注解（了解）</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>属性定义上方  或  标准 set 方法上方  或  类 set 方法上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>为引用类型属性指定注入的 beanId</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：设置注入的 beanId</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"知识点3value\"><a class=\"anchor\" href=\"#知识点3value\">#</a> 知识点 3：@Value</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>属性注解  或  方法注解（了解）</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>属性定义上方  或  标准 set 方法上方  或  类 set 方法上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>为  基本数据类型  或  字符串类型  属性设置值</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：要注入的属性值</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"知识点4propertysource\"><a class=\"anchor\" href=\"#知识点4propertysource\">#</a> 知识点 4：@PropertySource</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@PropertySource</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>加载 properties 文件中的属性值</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：设置加载的 properties 文件对应的文件名或文件名组成的数组</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h2>\n",
            "tags": [
                "Backend",
                "Framework",
                "Spring"
            ]
        },
        {
            "id": "https://slx-world.top/test/python/python-fundamentals/",
            "url": "https://slx-world.top/test/python/python-fundamentals/",
            "title": "Python 基础",
            "date_published": "2024-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h1>\n<ul>\n<li>\n<p>单行注释</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>单行注释</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注释内容</span></pre></td></tr></table></figure></li>\n<li>\n<p>多行注释</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>多行注释</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\" 注释内容 \"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">''' 注释内容 '''</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h1>\n<p>语法</p>\n<p><span class=\"red\">变量 = 值</span></p>\n<p>标识符</p>\n<ul>\n<li>\n<p>由数字、字⺟、下划线组成</p>\n</li>\n<li>\n<p>不能数字开头</p>\n</li>\n<li>\n<p>不能使用内置关键字</p>\n</li>\n<li>\n<p>严格区分大小写</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">False</th>\n<th style=\"text-align:center\">None</th>\n<th style=\"text-align:center\">True</th>\n<th style=\"text-align:center\">and</th>\n<th style=\"text-align:center\">as</th>\n<th style=\"text-align:center\">assert</th>\n<th style=\"text-align:center\">break</th>\n<th style=\"text-align:center\">class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">for</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">nonlocal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\">pass</td>\n<td style=\"text-align:center\">raise</td>\n<td style=\"text-align:center\">return</td>\n<td style=\"text-align:center\">try</td>\n<td style=\"text-align:center\">while</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">yield</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>命名习惯</p>\n<ul>\n<li>见名知义</li>\n<li>大驼峰：即每个单词首字⺟都大写，例如： MyName</li>\n<li>小驼峰：第二个（含）以后的单词首字⺟大写，例如： myName</li>\n<li>下划线：例如： my_name</li>\n</ul>\n<p>数据类型</p>\n<ul>\n<li><span class=\"rainbow\">整型</span>：<span class=\"rainbow\">int</span></li>\n<li><span class=\"rainbow\">浮点型</span>：<span class=\"rainbow\">float</span></li>\n<li><span class=\"rainbow\">字符串</span>：<span class=\"rainbow\">str</span></li>\n<li><span class=\"rainbow\">布尔型</span>：<span class=\"rainbow\">bool</span></li>\n<li><span class=\"rainbow\">元组</span>：<span class=\"rainbow\">tuple</span></li>\n<li><span class=\"rainbow\">集合</span>：<span class=\"rainbow\">set</span></li>\n<li><span class=\"rainbow\">字典</span>：<span class=\"rainbow\">dict</span></li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020184438051.png\" alt=\"image-20241020184438051\" /></p>\n<h1 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h1>\n<p>格式化符号</p>\n<ul>\n<li><span class=\"rainbow\">%s</span>：格式化输出字符串</li>\n<li><span class=\"rainbow\">%d</span>：格式化输出整数</li>\n<li><span class=\"rainbow\">%f</span>：格式化输出浮点数</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li><span class=\"rainbow\">%06d</span>：表示输出的整数显示位数，不足以 0 补全，超出当前位数则原样输出</li>\n<li><span class=\"rainbow\">%.2f</span>：表示小数点后显示的小数位数。</li>\n</ul>\n</div>\n<p>f - 字符串</p>\n<ul>\n<li><span class=\"rainbow\">f'{表达式}'</span></li>\n</ul>\n<p>转义字符</p>\n<ul>\n<li><span class=\"rainbow\">\\n</span>：换行</li>\n<li><span class=\"rainbow\">\\t</span>：制表符，，一个 tab 键（4 个空格）的距离</li>\n</ul>\n<p>print 结束符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>print结束符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'内容'</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h1>\n<p>输入功能</p>\n<ul>\n<li><span class=\"rainbow\">input (' 提示文字 ')</span></li>\n</ul>\n<p>输入的特点</p>\n<ul>\n<li>一般将 input 接收的数据存储到变量</li>\n<li>input 接收的任何数据默认都是字符串数据类型</li>\n</ul>\n<h1 id=\"转换数据类型\"><a class=\"anchor\" href=\"#转换数据类型\">#</a> 转换数据类型</h1>\n<p>转换数据类型常用的函数</p>\n<ul>\n<li>int()</li>\n<li>float()</li>\n<li>str()</li>\n<li>list()</li>\n<li>tuple()</li>\n<li>eval()</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">int(x [,base])</span></td>\n<td style=\"text-align:center\">将 x 转换为一个整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">float(x)</span></td>\n<td style=\"text-align:center\">将 x 转换为一个浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">complex(real [,imag])</td>\n<td style=\"text-align:center\">创建一个复数，real 为实部，imag 为虚部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">str(x)</span></td>\n<td style=\"text-align:center\">将对象  x 转换为字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">repr(x)</td>\n<td style=\"text-align:center\">将对象  x 转换为表达式字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">eval(str)</span></td>\n<td style=\"text-align:center\">用来计算在字符串中的有效 Python 表达式，并返回一个对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">tuple(s)</span></td>\n<td style=\"text-align:center\">将序列  s 转换为一个元组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"rainbow\">list(s)</span></td>\n<td style=\"text-align:center\">将序列  s 转换为一个列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chr(x)</td>\n<td style=\"text-align:center\">将一个整数转换为一个 Unicode 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ord(x)</td>\n<td style=\"text-align:center\">将一个字符转换为它的 ASCII 整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hex(x)</td>\n<td style=\"text-align:center\">将一个整数转换为一个十六进制字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">oct(x)</td>\n<td style=\"text-align:center\">将一个整数转换为一个八进制字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bin(x)</td>\n<td style=\"text-align:center\">将一个整数转换为一个二进制字符串</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ol>\n<li><span class=\"rainbow\">算数运算符</span></li>\n<li><span class=\"rainbow\">赋值运算符</span></li>\n<li><span class=\"rainbow\">复合赋值运算符</span></li>\n<li><span class=\"rainbow\">比较运算符</span></li>\n<li><span class=\"rainbow\">逻辑运算符</span></li>\n</ol>\n<h2 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<h2 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h2>\n",
            "tags": [
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://slx-world.top/test/test-basis/day02/",
            "url": "https://slx-world.top/test/test-basis/day02/",
            "title": "测试基础 Day02",
            "date_published": "2024-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"等价类划分法\"><a class=\"anchor\" href=\"#等价类划分法\">#</a> 🌺等价类划分法</h1>\n<h2 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 🌱说明</h2>\n<p>在所有测试数据中，具有某种<span class=\"yellow\">共同特征</span>的数据集合进行划分</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 🌱分类</h2>\n<ul>\n<li><span class=\"rainbow\">有效等价类</span>：满足需求的数据集合</li>\n<li><span class=\"rainbow\">无效等价类</span>：不满足需求的数据集合</li>\n</ul>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 🌱步骤</h2>\n<ol>\n<li>明确需求</li>\n<li>确定有效和无效等价类</li>\n<li>提取数据编写测试用例</li>\n</ol>\n<h2 id=\"适用场景\"><a class=\"anchor\" href=\"#适用场景\">#</a> 🌱适用场景</h2>\n<p>针对需要有大量数据测试输入，但是没办法穷举测试的地方</p>\n<ul>\n<li><span class=\"rainbow\">输入框</span></li>\n<li><span class=\"rainbow\">下拉列表</span></li>\n<li><span class=\"rainbow\">单选复选框</span></li>\n</ul>\n<p>典型代表：页面的输入框类测试</p>\n<h1 id=\"边界值分析法\"><a class=\"anchor\" href=\"#边界值分析法\">#</a> 🌺边界值分析法</h1>\n<h2 id=\"边界范围节点\"><a class=\"anchor\" href=\"#边界范围节点\">#</a> 🌱边界范围节点</h2>\n<p>选取<span class=\"yellow\">正好等于</span>、<span class=\"yellow\">刚好大于</span>、<span class=\"yellow\">刚好小于</span>边界的值作为测试数据</p>\n<ul>\n<li><span class=\"rainbow\">上点</span>：边界上的点（正好等于）</li>\n<li><span class=\"rainbow\">离点</span>：距离上点最近的点（刚好大于、刚好小于）</li>\n<li><span class=\"rainbow\">内点</span>：范围内的点（区间范围内的数据）</li>\n</ul>\n<h2 id=\"步骤-2\"><a class=\"anchor\" href=\"#步骤-2\">#</a> 🌱步骤</h2>\n<ol>\n<li>明确需求</li>\n<li>确定有效和无效等价类</li>\n<li>确定边界范围值</li>\n<li>提取数据编写测试用例</li>\n</ol>\n<h2 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 🌱优化</h2>\n<ul>\n<li><span class=\"rainbow\">上点</span>：必选（不考虑区间开闭）</li>\n<li><span class=\"rainbow\">内点</span>：必选（建议选择中间范围）</li>\n<li><span class=\"rainbow\">离点</span>：<span class=\"yellow\">开内闭外</span>（考虑开闭区间，开区间选择内部离点，闭区间选择外部离点）</li>\n</ul>\n<div class=\"note info\">\n<p>例如：标题长度大于 0，小于等于 30 个字符，离点选择 1，31</p>\n</div>\n<h2 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 🌱使用场景</h2>\n<ul>\n<li>在等价类的基础上，针对有边界范围的测试数据输入的地方（重点关注边界）</li>\n<li>常见词语描述：大小、尺寸、重量、最大、最小、至多、至少等修饰词语</li>\n<li>典型代表：有边界范围的<span class=\"yellow\">输入框</span>类测试</li>\n</ul>\n<h1 id=\"判定表法\"><a class=\"anchor\" href=\"#判定表法\">#</a> 🌺判定表法</h1>\n<h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 🌱定义</h2>\n<p>是一种以<span class=\"yellow\">表格</span>形式表达多条件逻辑判断的工具</p>\n<h2 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 🌱组成</h2>\n<ul>\n<li><span class=\"rainbow\">条件桩</span>：列出问题中的所有条件，列出条件的次序无关紧要</li>\n<li><span class=\"rainbow\">动作桩</span>：列出问题中可能采取的操作，操作的排序顺序没有约束</li>\n<li><span class=\"rainbow\">条件项</span>：列出条件对应的取值，所有可能情况下的真假值</li>\n<li><span class=\"rainbow\">动作项</span>：列出条件项的、各种取值情况下应该采取的动作结果</li>\n</ul>\n<h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 🌱练习</h2>\n<p>1）、输入的第一列字符必须是 A 或 B</p>\n<p>2）、第二列字符必须是一个数字</p>\n<p>3）、如果第一列字符不正确，则给出信息 L</p>\n<p>4）、如果第二列字符不正确，则给出信息 M</p>\n<p>5）、如果两列字符输入正确，则修改文件成功</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241020084629674.png\" alt=\"image-20241020084629674\" /></p>\n<h2 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 🌱规则</h2>\n<ul>\n<li>判定表中贯穿条件项和动作项的一列就是一条规则</li>\n<li>假设有 n 个条件，每个条件的取值有两个（0, 1），全组合有 2 的 n 次方种规则</li>\n</ul>\n<h2 id=\"步骤-3\"><a class=\"anchor\" href=\"#步骤-3\">#</a> 🌱步骤</h2>\n<ol>\n<li>明确需求</li>\n<li>画出判定表\n<ol>\n<li>列出条件桩和动作桩</li>\n<li>填写条件项、对条件进行全组合</li>\n<li>根据条件项的组合确定动作项</li>\n<li>简化、合并相似规则（有相同的动作）</li>\n</ol>\n</li>\n<li>根据规则编写测试用例</li>\n</ol>\n<h2 id=\"使用场景-2\"><a class=\"anchor\" href=\"#使用场景-2\">#</a> 🌱使用场景</h2>\n<ul>\n<li>有多个输入条件，多个输出结果，输入条件之间有<span class=\"yellow\">组合</span>关系，输入条件和输出结果之间有依赖（制约）关系</li>\n<li>判定表一般适用于条件组合数量较少的情况（比如 4 个条件以下）</li>\n</ul>\n<h1 id=\"场景法\"><a class=\"anchor\" href=\"#场景法\">#</a> 🌺场景法</h1>\n<h2 id=\"流程图\"><a class=\"anchor\" href=\"#流程图\">#</a> 🌱流程图</h2>\n<p>使用标准图形和箭头来表达程序或业务的走向</p>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20241019192905832.png\" alt=\"image-20241019192905832\" /></p>\n<p>流程图对测试人员有什么作用？</p>\n<ol>\n<li>能够看懂流程图，设计业务用例</li>\n<li>当需求文档信息不全时，能够根据需求，梳理出流程</li>\n</ol>\n<p>网页版工具：<ins class=\"info\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJvY2Vzc29uLmNvbS8=\">https://www.processon.com/</span></ins></p>\n<p>Windows 工具：visio</p>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 🌱介绍</h2>\n<ul>\n<li>\n<p>说明：</p>\n<p>场景法也可以叫流程图法，是用流程图描述用户的使用场景，然后通过覆盖流程路径来设计测试用例</p>\n</li>\n<li>\n<p>意义：</p>\n<ol>\n<li><span class=\"rainbow\">用户使用角度</span>：用户平时使用的不是单个功能，而是多个功能组合起来进行使用</li>\n<li><span class=\"rainbow\">测试人员角度</span>：平时测试的都是单个功能点进行测试，容易忽略多个功能的组合测试</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"适用场景-2\"><a class=\"anchor\" href=\"#适用场景-2\">#</a> 🌱适用场景</h2>\n<p>根据实际的应用场景，来测试业务用例，可以使用场景法</p>\n<h1 id=\"错误推测法\"><a class=\"anchor\" href=\"#错误推测法\">#</a> 🌺错误推测法</h1>\n<h2 id=\"定义-2\"><a class=\"anchor\" href=\"#定义-2\">#</a> 🌱定义</h2>\n<p>通过<span class=\"yellow\">经验</span>推测系统可能出现的问题</p>\n<h2 id=\"思想\"><a class=\"anchor\" href=\"#思想\">#</a> 🌱思想</h2>\n<p>根据经验列举出可能出现问题的清单，根据清单分析问题可能原因，推测发现缺陷</p>\n<h2 id=\"场景\"><a class=\"anchor\" href=\"#场景\">#</a> 🌱场景</h2>\n<ol>\n<li>时间紧，任务量大时，根据之前项目类似经验找出易出错的模块重点测试</li>\n<li>时间宽裕，通过该方法列出之前出现问题较多的模块再次测试</li>\n</ol>\n",
            "tags": [
                "Test",
                "Test-Basis"
            ]
        },
        {
            "id": "https://slx-world.top/backend/ssm/spring/day01/",
            "url": "https://slx-world.top/backend/ssm/spring/day01/",
            "title": "Spring_day01",
            "date_published": "2024-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"系统架构\"><a class=\"anchor\" href=\"#系统架构\">#</a> 🌲系统架构</h1>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/1629720945720.png\" alt=\"1629720945720\" /></p>\n<ol>\n<li><span class=\"rainbow\">核心层</span>\n<ul>\n<li><span class=\"yellow\">Core Container</span>：核心容器，这个模块是 Spring 最核心的模块，其他的都需要依赖该模块</li>\n</ul>\n</li>\n<li><span class=\"rainbow\">AOP 层</span>\n<ul>\n<li><span class=\"yellow\">AOP</span>：面向切面编程，它依赖核心层容器，目的是在不改变原有代码的前提下对其进行功能增强</li>\n<li><span class=\"yellow\">Aspects</span>：AOP 是思想，Aspects 是对 AOP 思想的具体实现</li>\n</ul>\n</li>\n<li><span class=\"rainbow\">数据层</span>\n<ul>\n<li><span class=\"yellow\">Data Access</span>：数据访问，Spring 全家桶中有对数据访问的具体实现技术</li>\n<li><span class=\"yellow\">Data Integration</span>：数据集成，Spring 支持整合其他的数据层解决方案，比如 Mybatis</li>\n<li><span class=\"yellow\">Transactions</span>：事务，Spring 中事务管理是 Spring AOP 的一个具体实现，也是后期学习的重点内容</li>\n</ul>\n</li>\n<li><span class=\"rainbow\">Web 层</span>\n<ul>\n<li>这一层的内容将在 SpringMVC 框架具体学习</li>\n</ul>\n</li>\n<li><span class=\"rainbow\">Test 层</span>\n<ul>\n<li>Spring 主要整合了 Junit 来完成单元测试和集成测试</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 🌲基本配置</h1>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean 的唯一标识<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean 的类全名<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean 的作用范围，有 singleton（默认）和 prototype<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bean 取的别名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>beans 标签：定义 Spring 核心容器管理的对象</p>\n<ul>\n<li>\n<p><span class=\"yellow\">id</span>：bean 的 id，使用容器可以通过 id 的值获取对应的 bean，在一个容器中 id 值唯一</p>\n</li>\n<li>\n<p><span class=\"yellow\">class</span>：bean 的类型，即配置的 bean 的全路径类名</p>\n</li>\n<li>\n<p><span class=\"yellow\">name</span>：定义 bean 的别名，可以定义多个，使用逗号（,）分号（;）空格 () 分隔</p>\n</li>\n<li>\n<p><span class=\"yellow\">scope</span>：定义 bean 的作用范围，可选范围如下：</p>\n<ul>\n<li><span class=\"red\">singleton</span>：单例（默认）</li>\n<li><span class=\"red\">prototype</span>：非单例</li>\n</ul>\n</li>\n</ul>\n<p>为什么 bean 默认为单例？</p>\n<ul>\n<li>bean 为单例的意思是在 Spring 的 IOC 容器中只会有该类的一个对象</li>\n<li>bean 对象只有一个就避免了对象的频繁创建与销毁，达到了 bean 对象的复用，性能高</li>\n</ul>\n<p>bean 在容器中是单例的，会不会产生线程安全问题？</p>\n<ul>\n<li>如果对象是有状态对象，即该对象有成员变量可以用来存储数据的。</li>\n<li>因为所有请求线程共用一个 bean 对象，所以会存在线程安全问题。</li>\n<li>如果对象是无状态对象，即该对象没有成员变量没有进行数据存储的，</li>\n<li>因方法中的局部变量在方法调用完成后会被销毁，所以不会存在线程安全问题。</li>\n</ul>\n<p>哪些 bean 对象适合交给容器进行管理？</p>\n<ul>\n<li>\n<p><span class=\"rainbow\">表现层对象</span></p>\n</li>\n<li>\n<p><span class=\"rainbow\">业务层对象</span></p>\n</li>\n<li>\n<p><span class=\"rainbow\">数据层对象</span></p>\n</li>\n<li>\n<p><span class=\"rainbow\">工具对象</span></p>\n</li>\n</ul>\n<p>哪些 bean 对象不适合交给容器进行管理？</p>\n<ul>\n<li>封装实例的域对象，因为会引发线程安全问题，所以不适合</li>\n</ul>\n<h1 id=\"bean-实例化\"><a class=\"anchor\" href=\"#bean-实例化\">#</a> 🌲bean 实例化</h1>\n<h2 id=\"构造方法实例化\"><a class=\"anchor\" href=\"#构造方法实例化\">#</a> 🍂构造方法实例化</h2>\n<p>Spring 容器在创建对象时，走的是类的<span class=\"yellow\">无参</span>构造方法，权限修饰符可以为<span class=\"yellow\">私有</span> <span class=\"red\">private</span>，底层用的是<span class=\"yellow\">反射</span></p>\n<h2 id=\"静态工厂实例化\"><a class=\"anchor\" href=\"#静态工厂实例化\">#</a> 🍂静态工厂实例化</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li><span class=\"red\">class</span>：工厂类的类全名</li>\n<li><span class=\"red\">factory-method</span>：具体工厂类中创建对象的方法名</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20210729195248948.png\" alt=\"image-20210729195248948\" /></p>\n<h2 id=\"实例工厂与-factorybean\"><a class=\"anchor\" href=\"#实例工厂与-factorybean\">#</a> 🍂实例工厂与 FactoryBean</h2>\n<h3 id=\"实例工厂实例化\"><a class=\"anchor\" href=\"#实例工厂实例化\">#</a> 💧实例工厂实例化</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol>\n<li>创建实例化工厂对象，对应的是第一行配置</li>\n<li>调用对象中的方法来创建 bean，对应的是第二行配置\n<ul>\n<li><span class=\"red\">factory-bean</span>：工厂的实例对象</li>\n<li><span class=\"red\">factory-method</span>：工厂类中的具体创建对象的方法名，对应关系如下:</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/image-20210729200203249.png\" alt=\"image-20210729200203249\" /></p>\n<h3 id=\"factorybean-的使用\"><a class=\"anchor\" href=\"#factorybean-的使用\">#</a> 💧FactoryBean 的使用</h3>\n<p>FactoryBean 接口的三个方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FactoryBean 接口</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">T</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><span class=\"red\">getObject()</span>：被重写后，在方法中进行对象的创建并返回</li>\n<li><span class=\"red\">getObjectType()</span>：被重写后，主要返回的是被创建类的 Class 对象</li>\n<li><span class=\"red\">isSingleton()</span>：没有被重写，因为它已经给了默认值，从方法名中可以看出其作用是设置对象是否为单例，默认 true，改为 false，则为多例</li>\n</ul>\n<h1 id=\"bean-生命周期\"><a class=\"anchor\" href=\"#bean-生命周期\">#</a> 🌲bean 生命周期</h1>\n<p>（1）Spring 中对 bean 生命周期控制提供了两种方式：</p>\n<ol>\n<li>在配置文件中的 bean 标签中添加 <span class=\"red\">init-method</span> 和 <span class=\"red\">destroy-method</span> 属性</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>类实现 <span class=\"red\">InitializingBean</span> 与 <span class=\"red\">DisposableBean</span> 接口，这种方式了解下即可</li>\n</ol>\n<p>（2）对于 bean 的生命周期控制在 bean 的整个生命周期中所处的位置如下:</p>\n<ul>\n<li>\n<p>初始化容器</p>\n<ol>\n<li>\n<p>创建对象 (内存分配)</p>\n</li>\n<li>\n<p>执行构造方法</p>\n</li>\n<li>\n<p>执行属性注入 (set 操作)</p>\n</li>\n<li>\n<p><span class=\"yellow\">执行 bean 初始化方法</span></p>\n</li>\n</ol>\n</li>\n<li>\n<p>使用 bean</p>\n<ol>\n<li>执行业务操作</li>\n</ol>\n</li>\n<li>\n<p>关闭 / 销毁容器</p>\n<ol>\n<li><span class=\"yellow\">执行 bean 销毁方法</span></li>\n</ol>\n</li>\n</ul>\n<p>（3）关闭容器的两种方式：</p>\n<ul>\n<li>\n<p>ConfigurableApplicationContext 是 ApplicationContext 的子类</p>\n<ol>\n<li>\n<p><span class=\"red\">close()</span> 方法</p>\n</li>\n<li>\n<p><span class=\"red\">registerShutdownHook()</span> 方法</p>\n</li>\n</ol>\n</li>\n<li>\n<p>close 和 registerShutdownHook 选哪个？</p>\n<ul>\n<li>\n<p>相同点：这两种都能用来关闭容器</p>\n</li>\n<li>\n<p>不同点：close () 是在调用的时候关闭，registerShutdownHook () 是在 JVM 退出前调用关闭。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"di-相关\"><a class=\"anchor\" href=\"#di-相关\">#</a> 🌲DI 相关</h1>\n<ul>\n<li>依赖注入描述了在容器中建立 bean 与 bean 之间的依赖关系的过程，如果 bean 运行需要的是数字或字符串呢？\n<ul>\n<li><span class=\"red\">简单类型（基本数据类型与 String）</span></li>\n<li><span class=\"red\">引用类型</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"setter-注入\"><a class=\"anchor\" href=\"#setter-注入\">#</a> 🍂setter 注入</h2>\n<ul>\n<li>\n<p>简单数据类型</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>引用数据类型</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"构造器注入\"><a class=\"anchor\" href=\"#构造器注入\">#</a> 🍂构造器注入</h2>\n<ul>\n<li>\n<p>简单数据类型</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>引用数据类型</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>依赖注入的方式选择上\n<ul>\n<li>建议使用 setter 注入</li>\n<li>第三方技术根据情况选择</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自动装配\"><a class=\"anchor\" href=\"#自动装配\">#</a> 🌲自动装配</h1>\n<p>什么是依赖自动装配？</p>\n<ul>\n<li>IoC 容器根据 bean 所依赖的资源在容器中自动查找并注入到 bean 中的过程称为自动装配</li>\n</ul>\n<p>自动装配方式有哪些？</p>\n<ul>\n<li>\n<p><span class=\"red\">按类型（常用）</span></p>\n</li>\n<li>\n<p><span class=\"red\">按名称</span></p>\n</li>\n<li>\n<p><span class=\"red\">按构造方法</span></p>\n</li>\n<li>\n<p><span class=\"red\">不启用自动装配</span></p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationcontext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>如果按照名称去找对应的 bean 对象，找不到则注入 <span class=\"red\">Null</span></p>\n</li>\n<li>\n<p>当某一个类型在 IOC 容器中有多个对象，按照名称注入只找其指定名称对应的 bean 对象，不会报错</p>\n</li>\n</ul>\n<p>对于依赖注入，需要注意一些其他的配置特征：</p>\n<ol>\n<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>\n<li>使用按类型装配时（<span class=\"red\">byType</span>）必须保障容器中相同类型的 bean 唯一，推荐使用</li>\n<li>使用按名称装配时（<span class=\"red\">byName</span>）必须保障容器中具有指定名称的 bean，因变量名与配置耦合，不推荐使用</li>\n<li>自动装配优先级低于 setter 注入与构造器注入，同时出现时自动装配配置失效</li>\n</ol>\n<h1 id=\"集合注入\"><a class=\"anchor\" href=\"#集合注入\">#</a> 🌲集合注入</h1>\n<p>常见的集合类型有哪些？</p>\n<ul>\n<li><span class=\"red\">数组</span></li>\n<li><span class=\"red\">List</span></li>\n<li><span class=\"red\">Set</span></li>\n<li><span class=\"red\">Map</span></li>\n<li><span class=\"red\">Properties</span></li>\n</ul>\n<h2 id=\"数组类型\"><a class=\"anchor\" href=\"#数组类型\">#</a> 🍂数组类型</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>array<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>100<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>200<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>300<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"list-类型\"><a class=\"anchor\" href=\"#list-类型\">#</a> 🍂List 类型</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>chuanzhihui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"set-类型\"><a class=\"anchor\" href=\"#set-类型\">#</a> 🍂Set 类型</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>set<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itcast<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>itheima<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>boxuegu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"map-类型\"><a class=\"anchor\" href=\"#map-类型\">#</a> 🍂Map 类型</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>china<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>henan<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kaifeng<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"properties-类型\"><a class=\"anchor\" href=\"#properties-类型\">#</a> 🍂Properties 类型</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationContext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>china<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>henan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>kaifeng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li><span class=\"yellow\">property</span> 标签表示 setter 方式注入，构造方式注入 <span class=\"yellow\">constructor-arg</span> 标签内部也可以写 <span class=\"red\">&lt;array&gt;</span>、<span class=\"red\">&lt;list&gt;</span>、<span class=\"red\">&lt;set&gt;</span>、<span class=\"red\">&lt;map&gt;</span>、<span class=\"red\">&lt;props&gt;</span> 标签</li>\n<li>List 的底层也是通过<span class=\"yellow\">数组</span>实现的，所以 <span class=\"red\">&lt;list&gt;</span> 和 <span class=\"red\">&lt;array&gt;</span> 标签是可以混用</li>\n<li>集合中要添加引用类型，只需要把 <span class=\"yellow\">&lt;value&gt;</span> 标签改成 <span class=\"red\">&lt;ref&gt;</span> 标签，这种方式用的比较少</li>\n</ul>\n",
            "tags": [
                "Backend",
                "Framework",
                "Spring"
            ]
        },
        {
            "id": "https://slx-world.top/test/test-basis/day01/",
            "url": "https://slx-world.top/test/test-basis/day01/",
            "title": "测试基础 Day01",
            "date_published": "2024-10-09T16:00:00.000Z",
            "content_html": "<h1 id=\"软件测试\"><a class=\"anchor\" href=\"#软件测试\">#</a> 🌺软件测试</h1>\n<p><span class=\"rainbow\">软件</span>：控制计算机硬件工作的工具</p>\n<p><span class=\"rainbow\">软件测试</span>：使用<span class=\"yellow\">技术</span>手段<span class=\"yellow\">验证</span>软件是否满足使用需求</p>\n<p>软件测试<span class=\"yellow\">目的</span>：减少软件<span class=\"yellow\">缺陷</span>（bug），保障软件质量</p>\n<h1 id=\"测试技能\"><a class=\"anchor\" href=\"#测试技能\">#</a> 🌺测试技能</h1>\n<ul>\n<li><span class=\"rainbow\">功能测试</span>：验证程序的<span class=\"yellow\">功能</span>是否满足需求</li>\n<li><span class=\"rainbow\">自动化测试</span>：使用<span class=\"yellow\">代码</span>或<span class=\"yellow\">工具</span>代替手工，对项目进行测试</li>\n<li><span class=\"rainbow\">接口测试</span>：使用<span class=\"yellow\">代码</span>或<span class=\"yellow\">工具</span>对服务端提供的接口进行测试</li>\n<li><span class=\"rainbow\">性能测试</span>：模拟<span class=\"yellow\">多人</span>使用软件，查找服务器缺陷</li>\n</ul>\n<h1 id=\"测试分类\"><a class=\"anchor\" href=\"#测试分类\">#</a> 🌺测试分类</h1>\n<h2 id=\"按测试阶段划分\"><a class=\"anchor\" href=\"#按测试阶段划分\">#</a> 🌱按测试阶段划分</h2>\n<ul>\n<li><span class=\"rainbow\">单元测试</span>：针对程序源代码进行测试</li>\n</ul>\n<p><strong>⬇️</strong></p>\n<ul>\n<li><span class=\"rainbow\">集成测试</span>：又称<span class=\"rainbow\">接口测试</span>，针对模块之间访问地址进行测试</li>\n</ul>\n<p><strong>⬇️</strong></p>\n<ul>\n<li><span class=\"rainbow\">系统测试</span>：对整个系统进行测试，包括功能、兼容、文档等测试</li>\n</ul>\n<p><strong>⬇️</strong></p>\n<ul>\n<li><span class=\"rainbow\">验收测试</span>：主要分为<span class=\"rainbow\">内测</span>、<span class=\"rainbow\">公测</span>，使用不同人群来发掘项目缺陷</li>\n</ul>\n<h2 id=\"按代码可见度划分\"><a class=\"anchor\" href=\"#按代码可见度划分\">#</a> 🌱按代码可见度划分</h2>\n<ul>\n<li><span class=\"rainbow\">黑盒测试</span>：不关注源代码，针对程序 UI 功能进行测试。源代码不可见，UI 功能可见</li>\n<li><span class=\"rainbow\">灰盒测试</span>：针对程序部分代码进行测试（接口）。<span class=\"yellow\">部分</span>源代码可见，UI 功能不可见</li>\n<li><span class=\"rainbow\">白盒测试</span>：针对程序源代码进行测试。全部代码可见，UI 功能不可见</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 🌱其他</h2>\n<ul>\n<li><span class=\"rainbow\">性能测试</span>：归属<span class=\"rainbow\">专项测试</span></li>\n<li><span class=\"rainbow\">自动化测试</span>：归属<span class=\"rainbow\">功能测试</span></li>\n</ul>\n<h1 id=\"质量模型\"><a class=\"anchor\" href=\"#质量模型\">#</a> 🌺质量模型</h1>\n<ol>\n<li><span class=\"rainbow\">功能性</span></li>\n<li><span class=\"rainbow\">性能</span></li>\n<li><span class=\"rainbow\">兼容性</span></li>\n<li><span class=\"rainbow\">易用性</span></li>\n<li><span class=\"rainbow\">可靠性</span></li>\n<li><span class=\"rainbow\">安全</span></li>\n<li><span class=\"rainbow\">可维护性</span></li>\n<li><span class=\"rainbow\">可移植性</span></li>\n</ol>\n<h1 id=\"测试流程\"><a class=\"anchor\" href=\"#测试流程\">#</a> 🌺测试流程</h1>\n<ol>\n<li><span class=\"rainbow\">需求评审</span>：确保各部门需求理解一致</li>\n</ol>\n<p><strong>⬇️</strong></p>\n<ol start=\"2\">\n<li><span class=\"rainbow\">计划编写</span>：测什么、谁来测、怎么测</li>\n</ol>\n<p><strong>⬇️</strong></p>\n<ol start=\"3\">\n<li><span class=\"rainbow\">用例设计</span>：验证项目是否符合需求的操作文档</li>\n</ol>\n<p><strong>⬇️</strong></p>\n<ol start=\"4\">\n<li><span class=\"rainbow\">用例执行</span>：项目模块开发完成，开始执行用例文档，实施测试</li>\n</ol>\n<p><strong>⬇️</strong></p>\n<ol start=\"5\">\n<li><span class=\"rainbow\">缺陷管理</span>：对缺陷进行管理的过程</li>\n</ol>\n<p><strong>⬇️</strong></p>\n<ol start=\"6\">\n<li><span class=\"rainbow\">测试报告</span>：实施测试结果文档</li>\n</ol>\n<h1 id=\"测试用例\"><a class=\"anchor\" href=\"#测试用例\">#</a> 🌺测试用例</h1>\n<p><span class=\"rainbow\">用例</span>：用户使用的案例</p>\n<p><span class=\"rainbow\">测试用例</span>：是为测试项目而设计的<span class=\"yellow\">执行文档</span></p>\n<p>测试用例的<span class=\"yellow\">作用</span>：</p>\n<ol>\n<li>防止漏测</li>\n<li>实施测试的标准</li>\n</ol>\n<h2 id=\"用例设计\"><a class=\"anchor\" href=\"#用例设计\">#</a> 🌱用例设计</h2>\n<ol>\n<li><span class=\"rainbow\">用例编号</span>：项目_模块_编号</li>\n<li><span class=\"rainbow\">用例标题</span>：预期结果（测试点）</li>\n<li><span class=\"rainbow\">项目 / 模块</span>：所属项目或模块</li>\n<li><span class=\"rainbow\">优先级</span>：表示用例的重要程度或者影响力 P0～P4 (P0 最高）</li>\n<li><span class=\"rainbow\">前置条件</span>：要执行此条用例，有哪些前置操作</li>\n<li><span class=\"rainbow\">测试步骤</span>：描述操作步骤</li>\n<li><span class=\"rainbow\">测试数据</span>：操作的数据，没有的话可以为空</li>\n<li><span class=\"rainbow\">预期结果</span>：期望达到的结果</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><span class=\"rainbow\">用例编号</span></th>\n<th><span class=\"rainbow\">用例标题</span></th>\n<th><span class=\"rainbow\">项目 / 模块</span></th>\n<th><span class=\"rainbow\">优先级</span></th>\n<th><span class=\"rainbow\">前置条件</span></th>\n<th><span class=\"rainbow\">测试步骤</span></th>\n<th><span class=\"rainbow\">测试数据</span></th>\n<th><span class=\"rainbow\">预期结果</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Test",
                "Test-Basis"
            ]
        },
        {
            "id": "https://slx-world.top/devops/docker/docker-notes/",
            "url": "https://slx-world.top/devops/docker/docker-notes/",
            "title": "Docker 笔记",
            "date_published": "2024-10-08T16:00:00.000Z",
            "content_html": "<h1 id=\"️初识-docker\"><a class=\"anchor\" href=\"#️初识-docker\">#</a> ⛵️初识 Docker</h1>\n<h2 id=\"docker-概念\"><a class=\"anchor\" href=\"#docker-概念\">#</a> 🐬Docker 概念</h2>\n<ul>\n<li>Docker 是一个开源的应用容器引擎・</li>\n<li>诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品（后改名为 Docker Inc）</li>\n<li>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上。</li>\n<li>容器是完全使用沙箱机制，相互隔离</li>\n<li>容器性能开销极低。</li>\n<li>Docker 从 17.03 版 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</li>\n</ul>\n<h2 id=\"docker-架构\"><a class=\"anchor\" href=\"#docker-架构\">#</a> 🐬Docker 架构</h2>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/docker/image-20250304130323777.png\" alt=\"image-20250304130323777\" /></p>\n<ul>\n<li><code>镜像（Image）</code> ：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>\n<li><code>容器（Container）</code> ：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>\n<li><code>仓库（Repository）</code> ：仓库可看成一个代码控制中心，用来保存镜像</li>\n</ul>\n<h1 id=\"️docker-命令\"><a class=\"anchor\" href=\"#️docker-命令\">#</a> ⛵️Docker 命令</h1>\n<h2 id=\"docker-进程相关命令\"><a class=\"anchor\" href=\"#docker-进程相关命令\">#</a> 🐬Docker 进程相关命令</h2>\n<p>启动 Docker 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 进程相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>停止 Docker 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 进程相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>重启 Docker 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 进程相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>查看 Docker 服务状态</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 进程相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl status <span class=\"token function\">docker</span></pre></td></tr></table></figure><p>设置开机自启动 Docker 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 进程相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></pre></td></tr></table></figure><h2 id=\"docker-镜像相关命令\"><a class=\"anchor\" href=\"#docker-镜像相关命令\">#</a> 🐬Docker 镜像相关命令</h2>\n<p>查看镜像：查看本地所有镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 镜像相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> images <span class=\"token parameter variable\">-q</span> <span class=\"token comment\"># 查看所有镜像的 id</span></pre></td></tr></table></figure><p>搜索镜像：从网络中查找需要的镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 镜像相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> search 镜像名称</pre></td></tr></table></figure><p>拉取镜像：从 Docker 仓库下载镜像到本地，镜像名称格式为：名称：版本号</p>\n<div class=\"note info\">\n<p>如果不指定版本号，则默认是最新的版本，如果不知道镜像版本号，可以去 docker hub 查看</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 镜像相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> search 镜像名称</pre></td></tr></table></figure><p>删除镜像：删除本地镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 镜像相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> rmi 镜像id <span class=\"token comment\"># 删除指定本地镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> rmi <span class=\"token string\">'docker images -q'</span> <span class=\"token comment\"># 删除本地所有镜像</span></pre></td></tr></table></figure><h2 id=\"docker-容器相关命令\"><a class=\"anchor\" href=\"#docker-容器相关命令\">#</a> 🐬Docker 容器相关命令</h2>\n<p>查看容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token comment\"># 查看正在运行的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> <span class=\"token comment\"># 查看所有容器，包括已停止运行的容器</span></pre></td></tr></table></figure><p>创建并启动容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run 参数</pre></td></tr></table></figure><p>进入容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 容器相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> 参数 <span class=\"token comment\"># 退出容器，容器不会关闭</span></pre></td></tr></table></figure><p>停止容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 容器相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop 容器名称</pre></td></tr></table></figure><p>启动容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 容器相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> start 容器名称</pre></td></tr></table></figure><p>删除容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 容器相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器名称</pre></td></tr></table></figure><p>查看容器信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>Docker 容器相关命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> inspect 容器名称</pre></td></tr></table></figure><h1 id=\"️docker-容器数据卷\"><a class=\"anchor\" href=\"#️docker-容器数据卷\">#</a> ⛵️Docker 容器数据卷</h1>\n<h2 id=\"数据卷概念\"><a class=\"anchor\" href=\"#数据卷概念\">#</a> 🐬数据卷概念</h2>\n<ul>\n<li>数据卷是宿主机的一个目录或文件</li>\n<li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li>\n<li>一个数据卷可以被多个容器同时挂载</li>\n<li>一个容器也可以被挂载多个数据卷</li>\n<li>数据卷和容器之间是多对多关系</li>\n</ul>\n<p><strong>数据卷作用</strong></p>\n<ul>\n<li>容器数据持久化</li>\n<li>外部机器和容器间接通信</li>\n<li>容器之间数据交换</li>\n</ul>\n<h2 id=\"配置数据卷\"><a class=\"anchor\" href=\"#配置数据卷\">#</a> 🐬配置数据卷</h2>\n<p>创建并启动容器时，使用 -v 参数设置容器卷</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">..</span>. <span class=\"token parameter variable\">-v</span> 宿主机目录（文件）:容器内目录（文件）</pre></td></tr></table></figure><div class=\"note info\">\n<ul>\n<li>目录必须是绝对路径</li>\n<li>如果目录不存在，则会自动创建</li>\n<li>可以挂载多个数据卷</li>\n</ul>\n</div>\n<h2 id=\"数据卷容器\"><a class=\"anchor\" href=\"#数据卷容器\">#</a> 🐬数据卷容器</h2>\n<p>多容器进行数据交换</p>\n<ul>\n<li>多个容器挂载同一个数据卷</li>\n<li>数据卷容器</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/docker/image-20250304125742681.png\" alt=\"image-20250304125742681\" /></p>\n<h1 id=\"️dockerfile\"><a class=\"anchor\" href=\"#️dockerfile\">#</a> ⛵️Dockerfile</h1>\n<h2 id=\"dockerfile-镜像原理\"><a class=\"anchor\" href=\"#dockerfile-镜像原理\">#</a> 🐬Dockerfile 镜像原理</h2>\n<p>操作系统组成部分：</p>\n<ul>\n<li>进程调度子系统</li>\n<li>进程通信子系统</li>\n<li>内存管理子系统</li>\n<li>设备管理子系统</li>\n<li><code>文件管理子系统</code></li>\n<li>网络通信子系统</li>\n<li>作业控制子系统</li>\n</ul>\n<p>Linux 文件系统由 <code>bootfs</code>  和 <code>rootfs</code>  两部分组成</p>\n<ul>\n<li>bootfs：包含 bootloader（引导加载程序）和 kernel（内核）</li>\n<li>rootfs： root 文件系统，包含的就是典型 Linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件</li>\n<li>不同的 linux 发行版，bootfs 基本一样，而 rootfs 不同，如 ubuntu，centos 等</li>\n</ul>\n<blockquote>\n<ul>\n<li>Docker 镜像是由特殊的文件系统叠加而成</li>\n<li>最底端是 bootfs，并使用宿主机的 bootfs</li>\n<li>第二层是 root 文件系统 rootfs, 称为 base image</li>\n<li>然后再往上可以叠加其他的镜像文件</li>\n<li>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。・</li>\n<li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</li>\n<li>当从一个镜像启动容器时，Docker 会在最顶层加载一个读写文件系统作为容器</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/docker/image-20250304132825228.png\" alt=\"image-20250304132825228\" /></p>\n<h2 id=\"镜像制作\"><a class=\"anchor\" href=\"#镜像制作\">#</a> 🐬镜像制作</h2>\n<p>Docker 镜像如何制作❓</p>\n<ol>\n<li>\n<p>容器转为镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> commit 容器id 镜像名称:版本号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> save <span class=\"token parameter variable\">-o</span> 压缩文件名称 镜像名称:版本号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> load –i 压缩文件名称</pre></td></tr></table></figure></li>\n<li>\n<p>Dockerfile</p>\n</li>\n</ol>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/docker/image-20250304132255649.png\" alt=\"image-20250304132255649\" /></p>\n<h2 id=\"dockerfile-概念\"><a class=\"anchor\" href=\"#dockerfile-概念\">#</a> 🐬Dockerfile 概念</h2>\n<p>Dockerfile 是一个文本文件，包含了一条条的指令，每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</p>\n<p>Dochub 网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbQ==\">https://hub.docker.com</span></p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FROM</td>\n<td>指定父镜像</td>\n<td>指定 dockerfile 基于那个 image 构建</td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>作者信息</td>\n<td>用来标明这个 dockerfile 谁写的</td>\n</tr>\n<tr>\n<td>LABEL</td>\n<td>标签</td>\n<td>用来标明 dockerfile 的标签 可以使用 Label 代替 Maintainer 最终都是在 docker image 基本信息中可以查看</td>\n</tr>\n<tr>\n<td>RUN</td>\n<td>执行命令</td>\n<td>执行一段命令 默认是 /bin/sh 格式: RUN command 或者 RUN [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>容器启动命令</td>\n<td>提供启动容器时候的默认命令 和 ENTRYPOINT 配合使用。格式 CMD command param1 param2 或者 CMD [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td>\n</tr>\n<tr>\n<td>ENTRYPOINT</td>\n<td>入口</td>\n<td>一般在制作一些执行就关闭的容器中会使用</td>\n</tr>\n<tr>\n<td>COPY</td>\n<td>复制文件</td>\n<td>build 的时候复制文件到 image 中</td>\n</tr>\n<tr>\n<td>ADD</td>\n<td>添加文件</td>\n<td>build 的时候添加文件到 image 中 不仅仅局限于当前 build 上下文 可以来源于远程服务</td>\n</tr>\n<tr>\n<td>ENV</td>\n<td>环境变量</td>\n<td>指定 build 时候的环境变量 可以在启动的容器的时候 通过 - e 覆盖 格式 ENV name=value</td>\n</tr>\n<tr>\n<td>ARG</td>\n<td>构建参数</td>\n<td>构建参数 只在构建的时候使用的参数 如果有 ENV 那么 ENV 的相同名字的值始终覆盖 arg 的参数</td>\n</tr>\n<tr>\n<td>VOLUME</td>\n<td>定义外部可以挂载的数据卷</td>\n<td>指定 build 的 image 那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [&quot;目录&quot;]</td>\n</tr>\n<tr>\n<td>EXPOSE</td>\n<td>暴露端口</td>\n<td>定义容器运行的时候监听的端口 启动容器的使用 - p 来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td>\n</tr>\n<tr>\n<td>WORKDIR</td>\n<td>工作目录</td>\n<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定 / 使用的是绝对地址 如果不是 / 开头那么是在上一条 workdir 的路径的相对路径</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>指定执行用户</td>\n<td>指定 build 或者启动的时候 用户 在 RUN CMD ENTRYPONT 执行的时候的用户</td>\n</tr>\n<tr>\n<td>HEALTHCHECK</td>\n<td>健康检查</td>\n<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>\n</tr>\n<tr>\n<td>ONBUILD</td>\n<td>触发器</td>\n<td>当存在 ONBUILD 关键字的镜像作为基础镜像的时候 当执行 FROM 完成之后 会执行 ONBUILD 的命令 但是不影响当前镜像 用处也不怎么大</td>\n</tr>\n<tr>\n<td>STOPSIGNAL</td>\n<td>发送信号量到宿主机</td>\n<td>该 STOPSIGNAL 指令设置将发送到容器的系统调用信号以退出。</td>\n</tr>\n<tr>\n<td>SHELL</td>\n<td>指定执行脚本的 shell</td>\n<td>指定 RUN CMD ENTRYPOINT 执行命令的时候 使用的 shell</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"️docker-服务编排\"><a class=\"anchor\" href=\"#️docker-服务编排\">#</a> ⛵️Docker 服务编排</h1>\n<p>服务编排：  <code>按照一定的业务规则批量管理容器</code></p>\n<h2 id=\"docker-compose\"><a class=\"anchor\" href=\"#docker-compose\">#</a> 🐬Docker Compose</h2>\n<p>Docker Compose 是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤：</p>\n<ol>\n<li>利用 Dockerfile 定义运行环境镜像</li>\n<li>使用 docker-compose.yml 定义组成应用的各服务</li>\n<li>运行 docker-compose up 启动应用</li>\n</ol>\n<h2 id=\"docker-私有仓库\"><a class=\"anchor\" href=\"#docker-私有仓库\">#</a> 🐬Docker 私有仓库</h2>\n<p>Docker 官方的 Docker hub（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbQ==\">https://hub.docker.com</span>）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</p>\n<h1 id=\"️docker-相关概念\"><a class=\"anchor\" href=\"#️docker-相关概念\">#</a> ⛵️Docker 相关概念</h1>\n<p>容器就是将软件打包成标准化单元，以用于开发、交付和部署。</p>\n<ul>\n<li>容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li>\n<li>容器化软件在任何环境中都能够始终如一地运行。</li>\n<li>容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li>\n</ul>\n<p><strong>docker 容器虚拟化 与 传统虚拟机比较</strong></p>\n<p>相同：</p>\n<ul>\n<li>容器和虚拟机具有相似的资源隔离和分配优势</li>\n</ul>\n<p>不同：</p>\n<ul>\n<li>容器虚拟化的是操作系统，虚拟机虚拟化的是硬件。</li>\n<li>传统虚拟机可以运行不同的操作系统，容器只能运行同一类型操作系统</li>\n</ul>\n<p><img data-src=\"https://images.weserv.nl/?url=https://cdn.jsdelivr.net/gh/slx-world/blog-images@master/devops/docker/image-20250304135759740.png\" alt=\"image-20250304135759740\" /></p>\n",
            "tags": [
                "DevOps",
                "Docker"
            ]
        }
    ]
}